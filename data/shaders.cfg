{
instances: [

{
	name: "hex_shader",
	new: true,
	vertex: "
		uniform mat4 u_anura_mvp_matrix;
		attribute vec2 a_anura_vertex;
		attribute vec2 a_anura_texcoord;
		varying vec2 v_texcoord;
		void main()
		{
			gl_Position = u_anura_mvp_matrix * vec4(a_anura_vertex, 0.0, 1.0);
			v_texcoord = a_anura_texcoord;
		}
	",

	fragment: "
		#version 120
		uniform sampler2D u_fog1_tex;
		uniform sampler2D u_fog2_tex;
		uniform sampler2D u_move_mask_tex;
		uniform sampler2D u_anura_tex_map;
		uniform float u_screen_x;
		uniform float u_screen_y;
		uniform float u_screen_width;
		uniform float u_screen_height;
		uniform bool u_have_move_mask;
		uniform sampler2D u_fog_mask_tex;
		uniform bool u_have_fog_mask;
		uniform sampler2D u_next_fog_mask_tex;
		uniform float u_next_fog_blend;
		uniform float u_anura_cycle;
		uniform vec4 u_anura_draw_area;
		//uniform vec4 u_anura_sprite_area;
		varying vec2 v_texcoord;
		void main()
		{
			gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
			if(u_have_move_mask) {
				vec4 mask = texture2D(u_move_mask_tex, v_texcoord);

				float avg = (gl_FragColor[0] + gl_FragColor[1] + gl_FragColor[2])/3.0;

				vec4 desaturate = vec4(avg,avg,avg,gl_FragColor[3]);
				gl_FragColor = mix(desaturate, gl_FragColor, mask[3]);
			}

			if(u_have_fog_mask) {
				vec2 pos = v_texcoord - vec2(-u_screen_x/u_screen_width, u_screen_y/u_screen_height);
				vec4 fog1_color = texture2D(u_fog1_tex, vec2(pos[0] + u_anura_cycle*0.001, pos[1]));
				vec4 fog2_color = texture2D(u_fog2_tex, vec2(pos[0] + u_anura_cycle*0.0003, pos[1]));

				float alpha = 0.0;

				for(float xpos = -2.0; xpos <= 2.0; xpos += 1.0) {
					for(float ypos = -2.0; ypos <= 2.0; ypos += 1.0) {
						alpha += texture2D(u_fog_mask_tex, vec2(clamp(v_texcoord[0] + xpos*0.01, 0, 1), clamp(v_texcoord[1] + ypos*0.01, 0, 1)))[3];
					}
				}

				alpha /= 25.0;

				if(u_next_fog_blend > 0.0) {
					float alpha2 = 0.0;
					for(float xpos = -2.0; xpos <= 2.0; xpos += 1.0) {
						for(float ypos = -2.0; ypos <= 2.0; ypos += 1.0) {
							alpha2 += texture2D(u_next_fog_mask_tex, vec2(clamp(v_texcoord[0] + xpos*0.01, 0, 1), clamp(v_texcoord[1] + ypos*0.01, 0, 1)))[3];
						}
					}

					alpha2 /= 25.0;

					alpha = mix(alpha, alpha2, u_next_fog_blend);
				}


				gl_FragColor = mix(gl_FragColor, fog1_color, fog1_color[3]*(1.0 - alpha)); //mix(fog1_color, gl_FragColor, 0.3 + mask[3]*0.7*gl_FragColor[3]);
				gl_FragColor = mix(gl_FragColor, fog2_color, fog2_color[3]*(1.0 - alpha)); //mix(fog1_color, gl_FragColor, 0.3 + mask[3]*0.7*gl_FragColor[3]);
				//gl_FragColor = mix(fog2_color, gl_FragColor, 0.3 + mask[3]*0.7);

			}
		}
	",

	create: "[
		set(textures, [t1,t2]),
	] where t1 = load_texture('effects/fog1.png')
	  where t2 = load_texture('effects/fog2.png')",

	draw: "[

	bind_texture(textures[0], 1),
	bind_texture(textures[1], 2),
	set(uniform_commands.u_fog1_tex, 1),
	set(uniform_commands.u_fog2_tex, 2),

	set(uniform_commands.u_screen_x, level.lock_screen[0]),
	set(uniform_commands.u_screen_y, level.lock_screen[1]),
	set(uniform_commands.u_screen_width, SCREEN_WIDTH),
	set(uniform_commands.u_screen_height, SCREEN_HEIGHT),

	if(move_mask_tex != null, [
		set(textures, [textures[0], textures[1], move_mask_tex, if(fog_mask_tex, fog_mask_tex, move_mask_tex), move_mask_tex]),
		bind_texture(move_mask_tex, 3),
		set(uniform_commands.u_move_mask_tex, 3),
		set(uniform_commands.u_have_move_mask, true),
	], [
		set(uniform_commands.u_have_move_mask, false)
	]),
	
	if(fog_mask_tex != null, [
		if(not move_mask_tex, set(textures, [textures[0], textures[1], fog_mask_tex, fog_mask_tex, fog_mask_tex])),
		bind_texture(fog_mask_tex, 4),
		set(uniform_commands.u_fog_mask_tex, 4),
		set(uniform_commands.u_have_fog_mask, true),
	], [
		set(uniform_commands.u_have_fog_mask, false)
	]);

	if(controller != null and controller.next_fog_blend > 0.0 and next_fog_mask_tex != null, [
		set(textures, textures[:4] + [next_fog_mask_tex]),
		bind_texture(next_fog_mask_tex, 5),
		set(uniform_commands.u_next_fog_mask_tex, 5),
		set(uniform_commands.u_next_fog_blend, controller.next_fog_blend),
	], [
		set(uniform_commands.u_next_fog_blend, 0.0),
	]),

	]
	   where move_mask_tex = if(move_mask != null, move_mask.texture)
	   where move_mask = find(level.hex_masks, value.id = 'move')
	   where fog_mask_tex = if(fog_mask != null, fog_mask.texture)
	   where fog_mask = find(level.hex_masks, value.id = 'fog')
	   where next_fog_mask_tex = if(next_fog_mask != null, next_fog_mask.texture)
	   where next_fog_mask = find(level.hex_masks, value.id = 'next_fog')
	   where controller = find(level.chars, value is obj game_controller)
	",
},
]
}

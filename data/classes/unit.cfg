{
	name: { type: "string" },
	move: { type: "int" },
	hitpoints: { type: "int" },
	mana: { type: "int", default: 0 },
	mana_gain: { type: "null|int" },
	wounds: { type: "int", default: 0, set: "set(_data, max(0, value))" },
	current_hitpoints: "int :: hitpoints - wounds",

	avatar_name: "string ::
		if(is_building, 'building', 'unit') + '_avatar_' + id
	",

	is_building: { type: "bool", default: false },

	has_zoc: "bool :: true",

	inflict_combat_damage: "def(class unit source, class attack attack, int amount) ->commands
		add(wounds, max(0, amount))
	",

	memory: { type: "int", default: 0 },

	actions: "[class action] :: attacks + summons + spells",

	attacks: { type: "[class attack]", default: [] },
	summons: { type: "[class summon]", default: [] },
	spells: { type: "[class spell]", default: [] },

	id: "string :: regex_replace(regex_replace(lower(name), ' ', '_'), '[^a-zA-Z_]', '')",

	controller: { type: "int", default: -1 },

	is_ruler: { type: "bool", default: false },

	loc: { type: "Loc", default: [-1,-1] },

	num_moves: { type: "int", default: 1 },
	has_moved: { type: "int", default: 0 },
	guard: { type: "bool", default: false },

	terrain_entry_cost: "def(tile t) ->decimal
		1.0 + if('village' in t.tags, 10000.0, 0.0)",

	on_new_round: "def() ->commands [
		set(has_moved, 0),
		if(mana_gain != null, add(mana, mana_gain)),
	]",

	possible_targets: "def(class game_state state) -> [class unit]
		filter(map(state.logical_map_assert.adjacent_tiles(loc), state.unit_at_loc(value)), value != null and state.is_enemy(controller, value.controller))
	",

	valid_summoning_locs: "def(class game_state state) -> [Loc]
		filter(state.logical_map_assert.adjacent_tiles(loc), state.unit_at_loc(value) = null)
	",

	check_death: "def(class game_state game) ->commands
	if(wounds >= hitpoints, [
		game.add_animation(construct('animation.unit_death', {
			unit: me,
		})),

		set(game.units, filter(game.units, value != me)),
	])
	",
}

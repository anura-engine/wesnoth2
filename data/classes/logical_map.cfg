{
	constructor: """
		[debug("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"), construct_adjacency_graph(), load_tile_types()]
	""",
	
	properties: {
		
		_even_q_odd_col: [[0,-1], [1,-1], [1,0], [0,1], [-1,0], [-1,-1]],
		_even_q_even_col: [[0,-1], [1,0], [1,1], [0,1], [-1,1], [-1,0]],
		
		tiles: {type: '[string]'},
		width: {type: 'int'},
		height: {type: 'int'},
		zorder: {type: 'int'},
		x: {type: 'int'},
		y: {type: 'int'},

		_terrain_type: { type: '{ string -> class hex_tile }' },
		
		load_tile_types: """def() -> commands
			set(_terrain_type, fold(get_terrain_document(), {}, {string <- value['string'] : map <- construct('hex_tile', value) }))
		""",
		
		get_terrain_document: """def() -> list
			list <- doc['terrain_type'] asserting doc != null where doc = map <- get_document('data/terrain.cfg')
		""",
		
		construct_adjacency_graph: """
			def() -> commands [
				set(height, newheight),
				[set(_adjacency[[w,h]], get_tile_ring([w,h])) | w <- range(width), h <- range(newheight)]
			] where newheight = size(tiles)/width
				
		""",
			
		// These co-ords are specific for even-q.
		get_tile_ring: """
			def(Loc l) -> [Loc]
				filter(map(if(l[0] % 2, _even_q_odd_col, _even_q_even_col), [l[0] + value[0], l[1] + value[1]]),
					value[0] >= 0 and value[1] >= 0 and value[0] < width and value[1] < height)
		""",

		_adjacency: { type: '{Loc -> [Loc]}', default: {} },

		adjacent_tiles: "def(Loc l) -> [Loc] _adjacency[l]",
		
		tiles_in_radius: """def(Loc l, int radius) -> [Loc]
			if(radius <= 0, [l], tiles_in_radius(l, radius-1))
		""",
		
		tile_at: "def(Loc l) -> class hex_tile _terrain_type[tiles[l[0] + l[1] * width]]",
	},
}
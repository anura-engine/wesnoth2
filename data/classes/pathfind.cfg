{
	find_path_to_loc: "def(class game_state state, class unit u, Loc dst) -> {path: [Loc]}

	{path: path}
		
	where path = [Loc]<- a_star_search(weighted_graph, u.loc, dst, def(Loc a, Loc b) ->decimal distance_between(a, b))

	where weighted_graph = get_weighted_graph(state, u)

	",

	find_paths: "def(class game_state state, class unit u) -> [Loc]
	filter(locs, state.unit_at_loc(value) = null)
	where locs = [Loc]<- path_cost_search(weighted_graph, u.loc, u.move)
	where weighted_graph = get_weighted_graph(state, u)
	",

	get_weighted_graph: "def(class game_state state,class unit u) ->weighted_directed_graph

	weighted_graph(dir_graph,
	  def(Loc aa, Loc bb) ->decimal
	  if(binary_search(enemy_locs, bb) or binary_search(ezocs, aa) and aa != u.loc or binary_search(building_locs, bb),
		 100000,
		 lib.terrain.stats(state, bb, u).move_cost
	  )
	)
	where ezocs = unique(sort(fold([ logical_map.adjacent_tiles(enemy.loc) | enemy <- state.units, enemy.controller != u.controller, enemy.has_zoc ], a+b)))
	where building_locs = sort([ b.loc | b <- state.buildings ])
	where enemy_locs = sort([ enemy.loc | enemy <- state.units, enemy.controller != u.controller ])
	where dir_graph = directed_graph(possible_locs, def(Loc loc)->[Loc] filter(logical_map.adjacent_tiles(loc), value in possible_locs))
	where possible_locs = logical_map.tiles_in_radius(u.loc, u.move)
	where logical_map = state.logical_map_assert
	",

	get_logical_map: "def(map m) ->logical_map
	query_cache(global_cache(16), m, logical_map<- hex_logical_map(m))
	",

	distance_between: "def(Loc a, Loc b) ->int
	  xdiff + max(0, ydiff - ydiscount)
	    where ydiscount = xdiff/2 + if(a[0]%2 = 0 and b[1] < a[1] or a[0]%2 = 1 and b[1] > a[1], xdiff%2, 0)
		where xdiff = abs(a[0] - b[0])
		where ydiff = abs(a[1] - b[1])
	",

	controller_los: "def(class game_state state, int nside) ->[Loc]
	unique(sort(all_locs))
	where all_locs = fold(map(units, unit_los(state, value)), a+b, [])
	where units = filter(state.units, value.controller = nside)
	",

	unit_los: "def(class game_state state, class unit u) ->[Loc]
	locs
	where locs = [Loc]<- path_cost_search(graph, u.loc, u.vision)
	where graph = query_cache(global_cache(64), [state._uuid, u._uuid],
	weighted_graph(dir_graph,
	  def(Loc aa, Loc bb) ->decimal
	  if(aa = u.loc, 1.0,
	  	lib.terrain.stats(state, aa, u).vision_cost
	  )
	)
	where dir_graph = directed_graph(possible_locs, def(Loc loc)->[Loc] filter(logical_map.adjacent_tiles(loc), value in possible_locs))
	where possible_locs = [[xpos,ypos] | xpos <- range(logical_map.width), ypos <- range(logical_map.height)]
	where logical_map = state.logical_map_assert
	)
	",
}

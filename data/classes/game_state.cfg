//This controls the full state of the game.
{
	bases: ['game_state_base'],
	tiles: { type: "{[int,int] ->bool}", default: {} },

	units: { type: "[class unit]" },
	buildings: { type: "[class building]" },

	unit_moving: { type: "null|class unit" },

	villages: { type: "{ Loc -> int }", init: "{[10,6]: -1, [19,6]: -1, [2,1]: -1, [20,2]: -1, [5,10]: -1, [19,13]: -1, [10,16]: -1, [19,15]: -1}" },

	game_map: { type: "map", init: "get_document('data/maps/map8.cfg')" },
	logical_map: { type: "null|logical_map" },
	logical_map_assert: "logical_map<- logical_map",

	adjacent_units: "def(Loc loc) ->[class unit]
		filter(map(logical_map_assert.adjacent_tiles(loc), unit_at_loc(value)), value != null)
	",

	adjacent_friends: "def(class unit u) ->[class unit]
		filter(map(logical_map_assert.adjacent_tiles(u.loc), unit_at_loc(value)), value != null and value.controller = u.controller)
	",

	adjacent_enemies: "def(class unit u) ->[class unit]
		filter(map(logical_map_assert.adjacent_tiles(u.loc), unit_at_loc(value)), value != null and value.controller != u.controller)
	",

	nround: { type: "int", default: 0 },

	begin_new_round: "def() ->commands
	set(_passes, 0);
	map(units, if(value.loc in villages, occupy_village(value, value.loc)));
	[
		add(nround, 1),
		map(units, value.on_new_round(me))
	]; fire_event('begin_round', [])",

	animations: { type: "[class animation]", default: [] },

	add_animation: "def(class animation anim) ->commands
		add(animations, [anim])
	",

	//Receive a move from a player and modify the game state appropriately.
	make_move: "def(class message.move move) ->commands
	if(move.loc not in tiles, [
		set(tiles[move.loc], if(current_player = 0, true, false)),
		set(current_player, (current_player+1)%2),
		set(_passes, 0),
	])
	",

	memorize: "def(class player p, class unit u, class action a) ->commands
	if(unit_can_move(u) and u.memory > 0,
	[
		add(u.memory, -1),
		if(a is class attack, add(u.attacks, [a]),
		   a is class summon, add(u.summons, [a]),
		   a is class spell, add(u.spells, [a]),
		   a is class conjuration, add(u.conjurations, [a]),
		),

		_set_unit_moved(u),

		set(p.spellbook.actions, filter(p.spellbook.actions, value != a)),
	])
	",

	_passes: { type: "int", default: 0 },

	pass_turn: "def() ->commands
	[
		set(unit_moving, null),
		set(current_player, (current_player+1)%size(players)),

		if(_passes+1 >= size(players), [
			fire_event('end_round', []);
			begin_new_round(),
		], [
			add(_passes, 1),
		]),
	]",

	occupy_village: "def(class unit u, Loc village_loc) ->commands
	[
		set(villages[village_loc], u.controller)
	] asserting village_loc in villages
	",

	unit_guard: "def(class unit u) ->commands
	if(unit_can_move(u),
	[
		if(unit_moving = null, _set_unit_moved(u)); _set_unit_moved(u),
		set(u.guard, true),
		set(unit_moving, null),
		set(current_player, (current_player+1)%size(players)),
		set(_passes, 0),
	])
	asserting unit_moving = null or unit_moving = u
	",

	unit_can_move: "def(class unit u) ->bool
		unit_moving = null and u.has_moved < u.num_moves or unit_moving = u
	",

	unit_summon: "def(class unit u, Loc loc, class summon s) ->commands
	if(loc in u.valid_summoning_locs(me) and u.mana >= s.mana_cost and
	   unit_can_move(u),
	[
		if(s.ncopies = 1,
			set(u.summons, filter(u.summons, value != s)),
		   s.ncopies > 0,
		   add(s.ncopies, -1)
		),
		set(u.guard, false),
		_set_unit_moved(u),
		add(u.mana, -s.mana_cost),
		set(new_unit.variation, s.variation(new_unit)),
		add(new_unit.has_moved, new_unit.num_moves),
		set(new_unit.controller, u.controller),
		set(new_unit.loc, loc),
		add(units, [new_unit]),
		add_animation(construct('animation.unit_summon', {summoner: u, summoned: new_unit})),
	]
	where new_unit = lib.wesnoth.create_unit(s.name, s.unit)
	)
	",

	building_conjure: "def(class unit u, Loc loc, class conjuration s) ->commands
	if(loc in u.valid_conjuring_locs(me) and u.mana >= s.mana_cost and
	   unit_can_move(u),
	[
		if(s.ncopies = 1,
			set(u.conjurations, filter(u.conjurations, value != s)),
		   s.ncopies > 0,
		   add(s.ncopies, -1)
		),
		set(u.guard, false),
		_set_unit_moved(u),
		add(u.mana, -s.mana_cost),
		add(new_building.has_moved, new_building.num_moves),
		set(new_building.controller, u.controller),
		set(new_building.loc, loc),
		add(buildings, [new_building]),
		add_animation(construct('animation.building_conjure', {conjurer: u, conjured: new_building})),
	]
	where new_building = lib.wesnoth.create_building(s.name, s.building)
	)
	",

	debug_unit: "def(Loc loc, class summon s) ->commands
	[
		set(new_unit.loc, loc),
		set(new_unit.controller, 0),
		set(new_unit.variation, s.variation(new_unit)),
		add(units, [new_unit]),
	]
	where new_unit = lib.wesnoth.create_unit(s.name, s.unit)
	",

	unit_move: "def(class unit u, [Loc] path) ->commands
	if(unit_can_move(u),
	[
		set(u.loc, dest),
		set(u.guard, false),

		add_animation(construct('animation.unit_move', {unit: u, path: path})),

		_set_unit_moved(u);

		(
		//free attacks from ranged units
		[ ; unit_attack(e, u, e.attacks[0], true); set(e.guard, false) | e <- enemies, e.attacks, e.attacks[0].ranged, e.guard]
		
		where enemies = adjacent_enemies(u)
		),


	])
		asserting (find(units, value.loc = dest) = null)
		where dest = path[size(path)-1]
		asserting path and (unit_moving = null or unit_moving = u)
	",

	loc_on_board: "def(Loc loc) ->bool
		loc[0] >= 0 and loc[1] >= 0 and loc[0] < logical_map_assert.width and loc[1] < logical_map_assert.height
	",

	unit_at_loc: "def(Loc loc) ->null|class unit
		find(units, value.loc = loc)
	",

	unit_at_loc_or_die: "def(Loc loc) ->class unit
		class unit<- unit_at_loc(loc)
	",

	unit_cast_spell: "def(class unit u, class spell s, [Loc] targets) ->commands
	if(unit_can_move(u) and u.mana >= s.mana_cost,
	[
		add_animation(construct('animation.unit_cast', {
			caster: u,
			spell: s,
			targets: targets,
		})),
		s.cast(u, me, targets),
		_set_unit_moved(u),
		add(u.mana, -s.mana_cost),
	]
	)
	",

	unit_attack: "def(class unit u, class unit target, class attack attack, bool free_attack=false) ->commands
	if(target in u.possible_targets(me) and u.mana >= attack.mana_cost and (unit_can_move(u) or free_attack),
	[
		add_animation(construct('animation.unit_battle', {
			unit: u,
			target: target,
			attacks: attacks,
		})),
		target.inflict_combat_damage(u, attack, sum(actual_blows)); target.check_death(me),
		u.inflict_combat_damage(u, attack, sum(actual_counterblows)); u.check_death(me),
		if(not free_attack, _set_unit_moved(u)),
		add(u.mana, -attack.mana_cost),
	]
	  where attacks = fold(map(
	      range(max(size(actual_blows), size(actual_counterblows))),
			  if(index < size(actual_blows), [{
				attacker: u,
				defender: target,
				attack: attack,
				damage: actual_blows[index],
				critical: actual_blows[index] > damage,
			  }], []) +
			  if(index < size(actual_counterblows), [{
				attacker: target,
				defender: u,
				attack: class attack<- counterattack,
				damage: actual_counterblows[index],
				critical: actual_counterblows[index] > counterattack.damage asserting counterattack,
			  }], [])
	  ), a+b)
	  where actual_counterblows = counterblows[:their_numblows]
	  where actual_blows = blows[:my_numblows]
	  where their_numblows = min(
	  	if(killing_blow = -1, size(counterblows), killing_blow),
		if(counter_killing_blow = -1, size(counterblows), counter_killing_blow+1)
	  )
	  where my_numblows = min(
	  	if(killing_blow = -1, size(blows), killing_blow+1),
		if(counter_killing_blow = -1, size(blows), counter_killing_blow+1)
	  )
	  where killing_blow = index(map(blows, sum(blows[:index+1]) >= target.current_hitpoints), true)
	  where counter_killing_blow = index(map(counterblows, sum(counterblows[:index+1]) >= u.current_hitpoints), true)
	  where blows = map(range(attack.strikes), if(roll > 100+target_defense, damage*2, roll < target_defense, 0, damage) where roll = 1d100)
	  where damage = attack.damage
	  where counterblows = if(counterattack, map(range(counterattack.strikes), if(roll > 100+unit_defense, counterattack.damage*2, roll < unit_defense, 0, counterattack.damage) where roll = 1d100), [])
	  where counterattack = if(attack.ranged = false and target.attacks and (('counterstrike' in target.attacks[0].abilities) or target.guard) and target.attacks[0].ranged = false, target.attacks[0])
	  where target_defense = target.calculate_defense(me)
	  where unit_defense = u.calculate_defense(me)
	)
	",

	_set_unit_moved: "def(class unit u) ->commands
		if(unit_moving = u, [
			set(unit_moving, null),
			set(current_player, (current_player+1)%size(players)),
			set(_passes, 0),
		], [
			set(unit_moving, u),
			add(u.has_moved, 1),
		])
	",

	fire_event: "def(string event_name, list args) ->commands
	[
		map(units, value.fire_event(me, event_name, args)),
		map(buildings, value.fire_event(me, event_name, args)),
	]
	",
}

//Class which resides on the server and controls creation of the game
//and manages messages from the client. Holds the actual game state
//in _state and sends this to the client.
{
	bases: ['tbs_game_base'],

	create: "def(map msg) ->commands [
		set(_state, construct('game_state', {
			players: player_objs,
			units: map(player_objs, value.ruler),
			buildings: [],
		}));
		if(_state,
			set(_state.logical_map, lib.pathfind.get_logical_map(_state.game_map));
			_state.begin_new_round()
		)
		//currently nothing since games always start the same.
	] where player_objs = map(players, construct('player', {
				name: string<- value.user,
				ruler: lib.wesnoth.create_ruler(string<- value.ruler, {controller: index, loc: if(index = 0, [14,18], [14,16])}),
				spellbook: construct('spellbook', map<- value.spellbook),
	        }))
	  where players = [map]<- msg.users",

	//Called when a mesage is received from a player.
	message: "def(map message, int player) ->commands
	debug(['MESSAGE FROM PLAYER: ', player, message]);
		if((player = state.current_player or message.type = 'memorize') and not message.execute, [
			//increments our state_id which signifies the game has changed
			//in a significant way and the game must be synced to clients.
			add(_game.state_id, 1),

			set(state.animations, []),

			if(message.type = 'multimessage',
				map([map]<- message.messages, ; _handle_message(value, player)),
				_handle_message(message, player)
			),
		])
	",

	_handle_message: "def(map message, int player) ->commands
		//tell the game to implement move logic.
		state.handle_message(class message<- construct('message.' + (string<- message.type), message + {player: player}))
	",

	//This is used before sending a message to the player to transform the
	//game state based on what the client should know about. 'doc' will get
	//the returned value from get_state(). We should modify it to suit
	//the given client. For instance we might want to remove FoW elements
	//that the player shouldn't know about.
	transform: "def(object doc, int nplayer) ->commands [set(doc.nplayer, nplayer), set(doc.logical_map, null)]",
}

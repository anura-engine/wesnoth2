{
properties: {
	init_chat: "def() ->commands
		if(chat_state is ChatState, set(_chat, chat_state))
			where chat_state = get_document(lib.wesnoth.local_username + '-chat-info.cfg', ['json', 'null_on_failure', 'user_preferences_dir'])
	",

	tab_ordering: {
		type: "[string]",
		set: "write_document(lib.wesnoth.local_username + '-chat-ordering.cfg', value)",
		get: "[string]<- get_document(lib.wesnoth.local_username + '-chat-ordering.cfg', ['json', 'null_on_failure', 'user_preferences_dir']) or []",
	},

	_chat: {
		type: "ChatState", init: "{ channels: {}, ignores: []}",
	},

	_ensure_channel_exists: "def(string channel) ->commands
		if(_chat.channels[channel] = null,
		   set(_chat.channels[channel], { users: {}, messages: [] }))
	",

	write: "def() ->commands
		write_document(lib.wesnoth.local_username + '-chat-info.cfg', _chat)
	",

	is_ignored: "def(string user) ->bool (user in _chat.ignores)",
	
	get_channel: "def(string channel) ->null|ChatChannel
		_chat.channels[channel]
	",

	set_channel: "def(string name, ChatChannel data) ->commands
		set(_chat.channels[name], data)
	",

	user_join: "def(string channel, string name) ->commands
	_ensure_channel_exists(channel);
		set(_chat.channels[channel].users[name], true)
	",

	user_part: "def(string channel, string name) ->commands
	_ensure_channel_exists(channel);
		set(_chat.channels[channel].users, remove_from_map(_chat.channels[channel].users, name))
	",

	channel_topic: "def(string channel, string topic) ->commands
	_ensure_channel_exists(channel);
		set(_chat.channels[channel].topic, topic)
	",

	add_chat_message: "def(string channel, ChatMessage message) ->commands
	if(c != null, if(size(c.messages) < 12, add(c.messages, [message]), set(c.messages, c.messages[size(c.messages)-12:] + [message])),
	   set(_chat.channels[channel], {users: {}, messages: [message]})
	 )
		where c = get_channel(channel)
	",

	ignore: "def(string user) ->commands
		if(user not in _chat.ignores,
			add(_chat.ignores, [user])
		)
	",

	ignore_list: "[string] :: _chat.ignores",

	unignore: "def(string user) ->commands
		set(_chat.ignores, filter(_chat.ignores, value != user))
	",

	offline_message_channels: { type: "[string]", default: [] },

	record_offline_message_channel: "def(string channel) ->commands
		if(channel not in offline_message_channels, add(offline_message_channels, [channel]))
	",

	nick_display: "def(string username) ->string
	upper(username[:1]) + username[1:]
	",

	channel_display: "def(string channel) ->string
		if(channel[:1] = '#', channel,
		   channel[:1] = '@', '@' + nick_display(channel[1:]),
		   nick_display(channel))
	",

}
}

{
	create_ruler: "def(string name, map args={}) ->class unit
	construct('unit', m + args + { name: name, is_ruler: true })
	    where m = ruler_info + { attacks: if(attacks_raw is list, map(attacks_raw, construct('attack', map<- value)))}
		where attacks_raw = ruler_info.attacks
		where ruler_info = map<- rulers_doc[name]
	",

	sound_volume: "def(string fname) ->decimal
	if(fname in volumes, volumes[fname], 1.0)
	  where volumes = {string -> decimal}<- get_document('data/sound-volume.cfg')",

	rulers_doc: "{string -> map} :: query_cache(global_cache(1), [], {string -> map} <- get_document('data/rulers.cfg'))",

	px: "def(int pixels) ->int pixels", //int((decimal(pixels)*decimal(SCREEN_WIDTH))/1440.0)",
	py: "def(int pixels) ->int pixels", //int((decimal(pixels)*decimal(SCREEN_HEIGHT))/900.0)",

	button_color_scheme: { type: "{normal: Color, depressed: Color, focus: Color, text_normal: Color, text_depressed: Color, text_focus: Color}",
	  default: {
		normal: [0,140,114,255],
		depressed: [168,64,30],
		focus: [168,64,30],
		text_normal: [158,216,166],
		text_depressed: [255,176,59],
		text_focus: [255,176,59],
	} },


}

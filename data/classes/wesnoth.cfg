{

	create_ruler: "def(string name, map args={}) ->class unit
		create_unit(name, ruler_info + args + { is_ruler: true })
			where ruler_info = map<- rulers_doc[name]
	",

	create_unit: "def(string name, map args) ->class unit
	construct('unit', m + { name: name })
	    where m = args + {
			attacks: if(attacks_raw is list, map(attacks_raw, construct('attack', map<- value)), []),
			summons: if(summons_raw is list, map(summons_raw, construct('summon', map<- value)), []),
		}
		where attacks_raw = args.attacks
		where summons_raw = args.summons
	",

	create_action: "def(string name) ->class action
	class action<-
	if(name in all_summons(),
		construct('summon', s)
			where s = map<- all_summons()[name],
	   name in all_buildings(),
	   	construct('conjuration', s)
		    where s = map<- all_buildings()[name],
	   name in all_spells(),
		construct('spell', s)
			where s = map<- all_spells()[name]

		asserting name in all_spells()
	)
	",

	all_summons: "def() ->{string -> map} query_cache(global_cache(1), null, get_docs_under_dir('data/units'))",

	all_buildings: "def() ->{string -> map} query_cache(global_cache(1), null, get_docs_under_dir('data/buildings'))",

	all_spells: "def() ->{string -> map} query_cache(global_cache(1), null, get_docs_under_dir('data/spells'))",

	get_docs_under_dir: "def(string dir) ->{string -> map}
		fold([fold(map([map]<- get_document(f), {(string<-value['name']): value}), a+b, {}) | f<- get_all_files_under_dir(dir), f[0] != '.' and f[size(f)-4:] = '.cfg'], a+b, {})
	",

	sound_volume: "def(string fname) ->decimal
	if(fname in volumes, volumes[fname], 1.0)
	  where volumes = {string -> decimal}<- get_document('data/sound-volume.cfg')",

	rulers_doc: "{string -> map} :: query_cache(global_cache(1), [], {string -> map} <- get_document('data/rulers.cfg'))",

	px: "def(int pixels) ->int pixels", //int((decimal(pixels)*decimal(SCREEN_WIDTH))/1440.0)",
	py: "def(int pixels) ->int pixels", //int((decimal(pixels)*decimal(SCREEN_HEIGHT))/900.0)",

	button_color_scheme: { type: "{normal: Color, depressed: Color, focus: Color, text_normal: Color, text_depressed: Color, text_focus: Color}",
	  default: {
		normal: [0,140,114],
		depressed: [168,64,30],
		focus: [168,64,30],
		text_normal: [158,216,166],
		text_depressed: [255,176,59],
		text_focus: [255,176,59],
	} },

	render_frame: "def(cairo_callable c, int w, int h, cairo_commands cmd, map|null m=null, map args={}) ->frame
	build_animation(
	{
		fbo: c.render(ww, hh, cmd, m),
		id: 'fbo',
		image: 'fbo',
		x: 0, y: 0, w: ww, h: hh,
		frames: 1, scale: 1,
		no_remove_alpha_borders: true,
	} + args
	) where ww = if(round_to_even(w) != w, w+1, w)
	  where hh = if(round_to_even(h) != h, h+1, h)",

	mouse_pos: "def(level lvl) ->[int,int]
		[int<- lvl.player.ctrl_mice[0][0], (int<-lvl.player.ctrl_mice[0][1]) - lvl.absolute_object_adjust_y]
	",


}

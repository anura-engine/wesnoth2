{
	//This holds our session with the server
	session_id: { type: "int", default: -1 },

	//The last state ID of the game we received. State ID's go upwards.
	//When we request updates we send the last known state ID we received,
	//and the server will update us if something newer is avilaable.
	_state_id: { type: "int", default: -1 },

	//This is the main entry point to the bot. Is called when a message
	//from the server is received. We should respond by adding something
	//to bot.script which controls a response.
	handle_message: "def(map message, object bot) ->commands
		if(message.type = 'game',
		   handle_game_message(message, bot),
		   request_updates(bot)
		)
	",

	handle_game_message: "def(class message.game message, object bot) ->commands
		set(_state_id, message.state_id);
		if(message.state.nplayer = message.state.current_player, [
			//Is our turn, so make a move.
			if(move != null,
				add(bot.script, [{
					session_id: session_id,
					send: {
						type: 'move',
						loc: move,
					}
				}])
			)
			where move = find(all_moves, value not in message.state.tiles)
			where all_moves = [[x,y] | x<-[0,1,2], y<-[0,1,2]]
		],

		//not our turn, so don't do anything on this message, just request
		//updates when they are available.
		request_updates(bot)
		)
	",

	//A function which sends a request to ask the server for updates when
	//available, will get a response with updates as needed.
	request_updates: "def(object bot) ->commands
	[
		add(bot.script, [{
			session_id: session_id,
			send: {
				type: 'request_updates',
				state_id: _state_id,
			},
		}]),
	]",
}

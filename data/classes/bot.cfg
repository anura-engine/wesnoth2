{
bases: ['bot_base'],

properties: {
	_logical_map: { type: "null|class logical_map" },

	handle_game_message: "def(class message.game message, object bot) ->commands
		if(_logical_map = null, [
			set(_logical_map, m),
			set(message.state.logical_map, m),
		] where m = lib.pathfind.get_logical_map(message.state.game_map), [
			set(message.state.logical_map, _logical_map)
		]);
		set(_state_id, message.state_id);
		if(message.state.nplayer = message.state.current_player,
		
		[
		add(bot.script, [{
			session_id: session_id,
			send: dump(get_best_move(message.state)),
		}])
		/*
			//Is our turn, so make a move.
			if(message.state.unit_moving,
			[
			debug(['BOT_MOVE2', path]),
			add(bot.script, [{
				session_id: session_id,
				send: {
					type: 'move_unit',
					unit_id: message.state.unit_moving._uuid,
					path: path,
				}
			}])
			]
			where path = lib.pathfind.find_path_to_loc(message.state, message.state.unit_moving, target_loc).path
			where target_loc = Loc<- choose(lib.pathfind.find_paths(message.state, message.state.unit_moving)),


			if(u != null,
			[
			debug(['BOT_MOVE', path]),
			add(bot.script, [{
				session_id: session_id,
				send: {
					type: 'move_unit',
					unit_id: u._uuid,
					path: path,
				}
			}])
			]
			where path = lib.pathfind.find_path_to_loc(message.state, u, target_loc).path
			where target_loc = Loc<- choose(lib.pathfind.find_paths(message.state, u)),

			add(bot.script, [{
				session_id: session_id,
				send: {
					type: 'pass_turn',
				}
			}])
			)

			where u = find(message.state.units, value.controller = message.state.current_player and value.has_moved < value.num_moves)
			)
					*/
		],

		//not our turn, so don't do anything on this message, just request
		//updates when they are available.
		request_updates(bot)
		)
	",

	get_best_move: "def(class game_state game, int depth=0) ->map
	res +
	if(res.type = 'move_unit', { //fill in the full path for a move_unit command here.
		path: lib.pathfind.find_path_to_loc(game, u, ([Loc]<- res.path)[0]).path,
	} where u = find_or_die(game.units, value._uuid = res.unit_id), {})
		where res = map<- choose(get_candidate_moves(game, depth), rate_move(game, value, depth))

	",

	get_candidate_moves: "def(class game_state game, int depth) ->[map]
	if(game.unit_moving != null,
	   get_unit_candidates(game, game.unit_moving, depth),
	   fold([get_unit_candidates(game, u, depth) | u <- game.units, u.controller = game.nplayer, u.num_moves > u.has_moved], a+b, []) + [{ type: 'pass_turn' }]
	)
	",

	eval_state: "def(class game_state game) ->decimal
	sum(
		map(game.units, eval_unit(game, value)) +
		map(game.villages, eval_village(game, key, value))
	)
	",

	eval_unit: "def(class game_state game, class unit u) ->decimal
		(
			(

			if(u.is_ruler, 1000.0 + size(u.summons)*4, 0) +

			if(u.guard, 2, 0) * size(enemies_in_range) +
		
			if(u.is_ruler, -u.wounds*4, 0) + u.current_hitpoints + u.mana + (int<- max(map(u.attacks, value.damage*value.strikes) + [0])) +
		
				//getting our units near the enemy leader is important.
				//scale this so the AI cares far more about being aggressive
				//and getting near the enemy leader than vice versa.
				//Can scale this though to give different aggression levels.
				if(u.is_ruler = false and enemy_ruler, 20 - lib.pathfind.distance_between(u.loc, enemy_ruler.loc), 0) * if(u.controller = game.nplayer, 1.0, 0.1)
		
			) where enemy_ruler = find(game.units, value.is_ruler and value.controller != u.controller)
		)
		
		* if(u.controller != game.nplayer, -1, 1)

		where enemies_in_range = filter(game.units, value.controller != u.controller and range <= value.num_moves+1 where range = lib.pathfind.distance_between(u.loc, value.loc))
	",

	eval_village: "def(class game_state game, Loc loc, int owner) ->decimal
	0.2*
	if(owner = game.nplayer or closest_ally = 0, 20,
	   owner != -1 and owner != game.nplayer or closest_enemy = 0, -20,
	   closest_enemy - closest_ally
	) where
		closest_ally = min([lib.pathfind.distance_between(loc, u.loc) | u <- game.units, u.controller = game.nplayer])
	  where
		closest_enemy = min([lib.pathfind.distance_between(loc, u.loc) | u <- game.units, u.controller != game.nplayer])
	",

	rate_move: "def(class game_state game, map move, int depth) ->decimal
	eval_state(new_game)

		where new_game = if(move.type = 'pass_turn', game,
		get_modified_object(game, def(class game_state g) ->commands [
			move_obj.execute(g);

			if(g.unit_moving and depth < 3,
				m_obj.execute(g)
				where m_obj = class message<- construct('message.' + (string<- m.type), m + {player: g.nplayer})
				where m = get_best_move(g, depth+1)
			)
		] where move_obj = class message<- construct('message.' + (string<- move.type), move + {player: g.nplayer}))
		)
	",

	get_unit_candidates: "def(class game_state game, class unit u, int depth) ->[map]
		if(depth = 0, get_unit_moves(game, u), []) +
		get_unit_summons(game, u) +
		get_unit_attacks(game, u) +
		get_unit_guard(game, u) +
		get_unit_memorize(game, u)
	",

	get_unit_moves: "def(class game_state game, class unit u) ->[map]

	map(lib.pathfind.find_paths(game, u), {
		type: 'move_unit',
		unit_id: u._uuid,
		path: [value], //lib.pathfind.find_path_to_loc(game, u, value).path,
	})
	",

	get_unit_summons: "def(class game_state game, class unit u) ->[map]
	if(summons = [], [],

		if(locs = [], [],
		[{
			type: 'summon_unit',
			unit_id: u._uuid,
			loc: choose(locs),
			summon: s.name,
	
		} | s <- summons]

		) where locs = u.valid_summoning_locs(game)
	) where summons = filter(u.summons, value.mana_cost <= u.mana)
	",

	get_unit_attacks: "def(class game_state game, class unit u) ->[map]
	if(possible_targets = [], [],

		[{
			type: 'attack_unit',
			unit_id: u._uuid,
			target_unit_id: t._uuid,
			attack: a.name,
		}
		| a <- u.attacks, t <- possible_targets
		]
	)
	where possible_targets = u.possible_targets(game)
	",

	get_unit_guard: "def(class game_state game, class unit u) ->[map]
	[{
		type: 'guard_unit',
		unit_id: u._uuid,
	}]
	",

	get_unit_memorize: "def(class game_state game, class unit u) ->[map]
	if(u.is_ruler = false or u.memory <= 0, [],
		map(game.players[game.nplayer].spellbook.actions,
		{
			type: 'memorize',
			unit_id: u._uuid,
			action_id: value._uuid,
		}
		)
	)
	",
}
}

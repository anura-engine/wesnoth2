{
	bases: ['action'],

	properties: {
		icon: { type: "string" },
		rules: { type: "string" },
		range: { type: "int" },

		animation: { type: "string", default: "magic" },

		halo: { type: "null|string" },

		projectile: { type: "null|string" },

		possible_targets: "def(class unit caster, class game_state game, [Loc] targets=[]) ->null|[Loc]
			[]
		",

		cast: "def(class unit caster, class game_state game, [Loc] targets) ->commands
		(
			cast_on_unit(caster, game, unit_target)
			where unit_target = game.unit_at_loc_or_die(targets[0])
		)
			asserting size(targets) = 1
		",

		cast_on_unit: "def(class unit caster, class game_state game, class unit target) ->commands
			null
		",

		targets_valid: "def(class unit caster, class game_state game, [Loc] targets, [Loc] looked_at=[]) ->bool
		if(possible = null, targets = [],
		   targets = [], false,
		   targets[0] not in possible, false,
		   targets_valid(caster, game, targets[1:], looked_at + [targets[0]])
		)
			where possible = possible_targets(caster, game, looked_at)
		",

		enemy_targets: "def(class unit caster, class game_state game, [Loc] targets=[]) ->null|[Loc]
		[u.loc | u <- game.units, u.loc in locs, u.controller != caster.controller]
			where locs = game.logical_map_assert.tiles_in_radius(caster.loc, range)
		",

		friendly_targets: "def(class unit caster, class game_state game, [Loc] targets=[]) ->null|[Loc]
		[u.loc | u <- game.units, u.loc in locs, u.controller = caster.controller]
			where locs = game.logical_map_assert.tiles_in_radius(caster.loc, range)
		",

		unit_targets: "def(class unit caster, class game_state game, [Loc] targets=[]) ->null|[Loc]
		[u.loc | u <- game.units, u.loc in locs]
			where locs = game.logical_map_assert.tiles_in_radius(caster.loc, range)
		",
	},
}

{
	bases: ['message_base'],
	properties: {
		type: { variable: true, default: 'message', type: 'string' },

	},

//Messages that are sent on the network.
classes: [
{
	//A move message, just contains the location we are playing at.
	move: { bases: ['message'], properties: {
		loc: { type: '[int,int]' },
	} },

	pass_turn: { bases: ['message'], properties: {
		execute: "def(class game_state game) ->commands
		game.pass_turn()
		"
	} },

	guard_unit: { bases: ['message'], properties: {
		unit_id: { type: "string" },

		execute: "def(class game_state game) ->commands
		if(u, game.unit_guard(u))
		where u = find(game.units, value._uuid = unit_id and value.controller = player)
		"
	} },

	move_unit: { bases: ['message'], properties: {
		unit_id: { type: "string" },
		path: { type: "[Loc]" },
		execute: "def(class game_state game) ->commands
		if(u != null, game.unit_move(u, path),
		              debug('ERROR: could not find unit: ' + unit_id))
			where u = find(game.units, value._uuid = unit_id)
		",
	} },

	attack_unit: { bases: ['message'], properties: {
		unit_id: { type: "string" },
		target_unit_id: { type: "string" },
		attack: { type: "string" },
		execute: "def(class game_state game) ->commands
		if(u != null and target != null and attack_obj != null, game.unit_attack(u, target, attack_obj),
		              debug('ERROR: could not find unit: ' + unit_id))
			where attack_obj = if(u, find(u.attacks, value.name = attack))
			where u = find(game.units, value._uuid = unit_id)
			where target = find(game.units, value._uuid = target_unit_id)
		",
	} },

	summon_unit: { bases: ['message'], properties: {
		unit_id: { type: "string" },
		loc: { type: "Loc" },
		summon: { type: "string" },

		execute: "def(class game_state game) ->commands
		if(u != null and summon_obj != null,
			game.unit_summon(u, loc, summon_obj), 
		)
			where summon_obj = if(u, find(u.summons, value.name = summon))
			where u = find(game.units, value._uuid = unit_id)
		",


	} },

	conjure_building: { bases: ['message'], properties: {
		unit_id: { type: "string" },
		loc: { type: "Loc" },
		conjure: { type: "string" },

		execute: "def(class game_state game) ->commands
		if(u != null and conjure_obj != null,
			game.building_conjure(u, loc, conjure_obj), 
		)
			where conjure_obj = if(u, find(u.conjurations, value.name = conjure))
			where u = find(game.units, value._uuid = unit_id)
		",


	} },

	cast_spell: { bases: ['message'], properties: {
		unit_id: { type: "string" },
		spell_id: { type: "string" },
		targets: { type: "[Loc]" },

		execute: "def(class game_state game) ->commands
		if(s and u, game.unit_cast_spell(u, s, targets))
			where s = if(u, find(u.spells, value._uuid = spell_id))
			where u = find(game.units, value._uuid = unit_id)
		",
	} },

	memorize: { bases: ['message'], properties: {
		unit_id: { type: "string" },
		action_id: { type: "string" },

		execute: "def(class game_state game) ->commands
		if(u != null and a != null and u.memory > 0, [
			game.memorize(p, u, a),
		])

		where a = find(p.spellbook.actions, value._uuid = action_id)
		where u = find(game.units, value._uuid = unit_id)
		where p = game.players[player]
		",
	} },

	debug_unit: { bases: ['message'], properties: {
		loc: { type: "Loc" },
		summon: { type: "string" },

		execute: "def(class game_state game) ->commands

		if(s != null,
		   game.debug_unit(loc, construct('summon', s))
		)
		where s = lib.wesnoth.all_summons()[summon]
		",


	} },


	//The main message the server sends to clients to describe the
	//game state.
	game: { bases: ['message_base.game'],
	properties: {
	}
	},
}
]
}

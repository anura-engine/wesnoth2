{
	id: "unit_avatar",
	is_strict: true,

	zorder: 200,

	properties: {
		unit: { type: "class unit" },
		orb: { type: "null|obj orb" },
		disc: { type: "null|obj unit_disc" },
		lifebar: { type: "null|obj lifebar" },

		on_board: { type: "bool", default: true, set: "if(value != _data, [set(_data, value), fire_event('create')])" },

		guard_image: { type: "null|obj image_widget" },

		controller: { type: "obj game_controller" },

		launch_projectile_animation: "def() ->commands null",
		launch_projectile_delay: "int :: 0",

		summon_halo: "null|string :: null",
		summoned_halo: "null|string :: null",

		show_halo: "def(null|string name) ->commands
		if(name != null,
			spawn(name, {
				mid_x: mid_x,
				mid_y: mid_y,
				zorder: zorder+10,
			})
		)
		",

		melee_attack_animation: "def(class animation.unit_attack info) ->commands
		[
			set(animation, 'melee_attack'),
			controller.reserve_animation_time(50),
		]
		",

		summon_animation: "def(class animation.unit_summon info) ->commands
		[
			set(animation, 'magic'),
			show_halo(summon_halo),
		]",

		summoned_animation: "def(class animation.unit_summon info) ->commands
		;
		[
			set(alpha, 0);
			animate(me, {
				alpha: 255,
			}, {
				duration: 40,
				on_complete: set(me.on_board, true),
			}),
			show_halo(summoned_halo),
		]",


		update: "def() ->commands
		execute(me,
		[
			if(unit.guard and guard_image = null, [
				spawn('image_widget', {
					image: 'guard-icon.png',
					image_area: [0,0,31,31],
					draw_width: 32,
					draw_height: 32,
					zorder: me.zorder+1,
				}, [
					set(me.guard_image, child),
				])
			]),

			if(unit.guard = false and guard_image, [
				remove_object(guard_image),
				set(guard_image, null),
			]),

			if(lifebar, [
				set(lifebar.current_hitpoints, unit.current_hitpoints),
				set(lifebar.maximum_hitpoints, unit.hitpoints),
			]),
		])",

		animate_movement: "def(class animation.unit_move move) ->commands execute(me,
		[
			if(size(path) >= 2, [
				controller.reserve_animation_time(size(path)*10),
				set(mid_x, controller.tile_mid_x(path[0])),
				set(mid_y, controller.tile_mid_y(path[0])),

				map(path[1:],
					animate(me, {
						mid_x: controller.tile_mid_x(value),
						mid_y: controller.tile_mid_y(value),
					}, {
						name: 'move',
						duration: 10,
						replace_existing: false,
					})
				)
			])
		]
		) where path = move.path",

		_preview_pane: { type: "null|obj unit_pane" },
	},

	on_end_melee_attack_anim: "set(animation, 'stand')",

	on_create: "
	if(on_board, [
		spawn('orb', {
			mid_x: mid_x,
			mid_y: mid_y,
			unit_avatar: me,
			is_enemy: unit.controller != controller.state.nplayer,
		}, [
			set(me.orb, child),
		]),

		spawn('lifebar', {
			current_hitpoints: unit.current_hitpoints,
			maximum_hitpoints: unit.hitpoints,
		}, [
			set(me.lifebar, child),
		]),

		spawn('unit_disc', {
			mid_x: mid_x,
			mid_y: y2,
			zorder: zorder-1,
			color_map: if(
				unit.controller = 0, [1.0,0.0,0.0],
				unit.controller = 1, [0.0,0.0,1.0],
				unit.controller = 2, [0.0,1.0,0.0],
				unit.controller = 3, [1.0,1.0,0.0],
				unit.controller = 4, [1.0,0.0,1.0],
				[1.0,1.0,1.0]),
		}, [
			set(me.disc, child),
		]),
	]
	)
	",

	on_process: "
	[
		if(orb, [
			set(orb.is_active, not unit.has_moved),
			set(orb.is_currently_moving, controller.state.unit_moving = unit),
			set(orb.mid_x, me.mid_x - 16),
			set(orb.mid_y, me.mid_y - 20),
			set(orb.zorder, me.zorder+1),
		]),

		if(disc, [
			set(disc.mid_x, me.mid_x),
			set(disc.mid_y, me.y2-14),
			set(disc.zorder, me.zorder-1),
		]),

		if(lifebar, [
			set(lifebar.mid_x, me.mid_x - 16),
			set(lifebar.y, me.mid_y - 16),
			set(lifebar.zorder, me.zorder+1),
		]),

		if(guard_image, [
			set(guard_image.x, x+20),
			set(guard_image.y, y+20),
		])
	]
	",

	on_mouse_enter: "
		if(on_board and find(level.chars, value is obj unit_pane and value.unit = unit) = null, [
			spawn('unit_pane', {
				unit: unit,
				controller: controller,
				x: if(controller.mouse_pos_abs[0] > SCREEN_WIDTH/2,
				     x - 190,
					 x2 + 10
				   ) - controller.screen_x,
				mid_y: mid_y - controller.screen_y,
				zorder: zorder + 10,
				has_border: true,
			}, [
				set(_preview_pane, child),
			]),
		])
	",

	on_mouse_leave: "[
		remove_object(_preview_pane),
		set(_preview_pane, null),
	]",

	on_being_removed: "map(spawned_children, remove_object(value))",
	on_type_updated: "fire_event('create')",

}

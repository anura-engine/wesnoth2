{
	id: "login_controller",
	hidden_in_game: true,
	is_strict: true,

	properties: {
		screen_width: "int :: SCREEN_WIDTH",
		screen_height: "int :: SCREEN_HEIGHT",

		_titlescreen_controller: { type: "obj titlescreen_controller" },

		_removed_widgets: { type: "[custom_obj]", default: [] },

		return: "def() ->commands [
			map(_removed_widgets, add_object(value)),
			map([me] + _widgets, remove_object(value)),
			set(_widgets, []),
		]",

		_do_auto_login: "def(string cookie) ->commands [
			set(_client, cl),
			execute(me, tbs_send(cl, {
				type: 'auto_login',
				cookie: cookie,
			})),
		] where cl = tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, { retry_on_timeout: false })",

		_enter_login_or_register: "def() ->commands [
			map(_widgets, remove_object(value)),
			set(_widgets, []),

			_add_button('Login', 60*0, me._enter_login_screen),
			_add_button('Register', 60*1, me._enter_register_screen),
			_add_button('Cancel', 60*4, me.return),
		]",

		_enter_login_screen: "def() ->commands [
			map(_widgets, remove_object(value)),
			set(_widgets, []),

			spawn('text_entry', {
				zorder: zorder+1,
				_width: lib.wesnoth.py(160),
				_password: false,
				mid_x: screen_width/2,
				mid_y: screen_height/2 + lib.wesnoth.py(80),
				default_text: 'Username',
				_on_enter: me._do_login,
				has_focus: true,
			}, [
				add(_widgets, [child]),
				set(_username_entry, child),
			]),

			spawn('text_entry', {
				zorder: zorder+1,
				_width: lib.wesnoth.py(160),
				_password: true,
				mid_x: screen_width/2,
				mid_y: screen_height/2 + lib.wesnoth.py(80 + 40),
				default_text: 'Password',
				_on_enter: me._do_login,
			}, [
				add(_widgets, [child]),
				set(_passwd_entry, child),
			]),

			spawn('button_controller', {
				text: 'Remember Me',
				zorder: zorder+1,
				mid_x: screen_width/2,
				mid_y: screen_height/2 + lib.wesnoth.py(80 + 40*2),
				_font_size: lib.wesnoth.px(14),
				button_height: lib.wesnoth.py(24),
				checked: remember_me,
				on_click: def() ->commands set(remember_me, not remember_me),
			}, [
				add(_widgets, [child]),
			]),

			if(_error_message != null,
				spawn('label', {
					mid_x: screen_width/2,
					mid_y: screen_height/2 + lib.wesnoth.py(80 + 40*4),
					_color: [1,0,0,1],
					_text: [_error_message],
					zorder: zorder+1,
					_font_size: lib.wesnoth.py(14),
				}, [
					add(_widgets, [child]),
				])
			),

			_add_button('Login', 60*3, me._do_login),
			_add_button('Cancel', 60*4, me._enter_login_or_register),

		]",

		_do_register: "def() ->commands
		execute(me,
		if(get_confirm_password() != get_password(),
		[
			set(_error_message, 'Passwords do not match');
			_enter_register_screen()
		],
		[
			set(_registering, true),
			set(_client, cl),
			execute(me, tbs_send(cl, {
				type: 'register',
				user: get_username(),
				passwd: md5(get_password()),
				email: get_email(),
				remember: remember_me,
			})),
		] where cl = tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, { retry_on_timeout: false })
		)
		)",

		_do_login: "def() ->commands
		execute(me,
		[
			set(_registering, false),
			set(_client, cl),
			debug('SEND LOGIN'),
			execute(me, tbs_send(cl, {
				type: 'login',
				user: get_username(),
				passwd: md5(get_password()),
				remember: remember_me,
			})),
		] where cl = tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, { retry_on_timeout: false })
		)
		",

		_registering: { type: "bool", default: false },

		_client: { type: "object|null", default: null },

		get_username: "def() ->string
			_username_entry.text asserting _username_entry != null
		",

		get_password: "def() ->string
			_passwd_entry.text asserting _passwd_entry != null
		",

		get_confirm_password: "def() ->string
			_confirm_passwd_entry.text asserting _confirm_passwd_entry != null
		",

		get_email: "def() ->string
			_email_entry.text asserting _email_entry != null
		",

		_username_entry: { type: "null|obj text_entry" },
		_passwd_entry: { type: "null|obj text_entry" },
		_confirm_passwd_entry: { type: "null|obj text_entry" },
		_email_entry: { type: "null|obj text_entry" },

		remember_me: { type: "bool", default: true },
		_error_message: { type: "null|string" },

		_enter_register_screen: "def() ->commands [
			map(_widgets, remove_object(value)),
			set(_widgets, []),

			spawn('text_entry', {
				zorder: zorder+1,
				_width: lib.wesnoth.py(160),
				_password: false,
				mid_x: screen_width/2,
				mid_y: screen_height/2 + lib.wesnoth.py(80),
				default_text: 'Username',
				text: if(_username_entry, _username_entry.text, ''),
				_on_enter: me._do_register,
				has_focus: true,
			}, [
				add(_widgets, [child]),
				set(_username_entry, child),
			]),

			spawn('text_entry', {
				zorder: zorder+1,
				_width: lib.wesnoth.py(160),
				_password: true,
				mid_x: screen_width/2,
				mid_y: screen_height/2 + lib.wesnoth.py(80 + 35),
				text: if(_passwd_entry, _passwd_entry.text, ''),
				default_text: 'Password',
				_on_enter: me._do_register,
			}, [
				add(_widgets, [child]),
				set(_passwd_entry, child),
			]),

			spawn('text_entry', {
				zorder: zorder+1,
				_width: lib.wesnoth.py(160),
				_password: true,
				mid_x: screen_width/2,
				mid_y: screen_height/2 + lib.wesnoth.py(80 + 70),
				default_text: 'Confirm Password',
				text: if(_confirm_passwd_entry, _confirm_passwd_entry.text, ''),
				_on_enter: me._do_register,
			}, [
				add(_widgets, [child]),
				set(_confirm_passwd_entry, child),
			]),

			spawn('text_entry', {
				zorder: zorder+1,
				_width: lib.wesnoth.py(160),
				_password: false,
				mid_x: screen_width/2,
				mid_y: screen_height/2 + lib.wesnoth.py(80 + 105),
				default_text: 'Email (optional)',
				text: if(_email_entry, _email_entry.text, ''),
			}, [
				add(_widgets, [child]),
				set(_email_entry, child),
			]),

			spawn('button_controller', {
				text: 'Remember Me',
				zorder: zorder+1,
				mid_x: screen_width/2,
				mid_y: screen_height/2 + lib.wesnoth.py(80 + 35*4),
				_font_size: lib.wesnoth.px(14),
				button_height: lib.wesnoth.py(24),
				checked: true,
				on_click: def() ->commands null,
			}, [
				add(_widgets, [child]),
			]),

			if(_error_message != null,
				spawn('label', {
					mid_x: screen_width/2,
					mid_y: screen_height/2 + lib.wesnoth.py(80 + 40*5),
					_color: [1,0,0,1],
					_text: [_error_message],
					zorder: zorder+1,
					_font_size: lib.wesnoth.py(14),
				}, [
					add(_widgets, [child]),
				])
			),

			_add_button('Register', 60*3, me._do_register),
			_add_button('Cancel', 60*4, me._enter_login_or_register),

		]",

		_add_button: "def(string text, int pos, function()->commands on_click) ->commands
			spawn('button_controller', {
				text: text,
				zorder: zorder+1,
				mid_x: screen_width/2,
				mid_y: screen_height/2 + lib.wesnoth.py(80 + pos),
				on_click: on_click,
			}, [
				add(_widgets, [child]),
			])
		",

		_widgets: { type: "[custom_obj]", default: [] },

		_complete_login: "def(int session_id, string username, string|null cookie, AccountDetails info, int info_version, int timestamp) ->commands [
			set(lib.wesnoth.server_time_delta, timestamp - time().unix),
			lib.wesnoth.write_cookie(cookie),
			set(lib.wesnoth.local_username, username); lib.chat.init_chat(),
			map(_widgets, remove_object(value)),
			remove_object(me),
			debug('LOGGED IN'),
			add_object(playable),
		] where playable = object_playable('multiplayer_lobby_controller', 0, 0, 1, {
			_titlescreen_controller: _titlescreen_controller,
			_removed_widgets: _removed_widgets,
			_mm_client_state: construct('mm_client_state', {
				client: tbs_client(TBS_SERVER_ADDRESS, TBS_SERVER_PORT, {
					session: session_id,
					id: 'matchmake',
				}),
				username: username,
				session_id: session_id,
				account_info_version: info_version,
				account_info: info,
			}),
		})",

	},

	events: {
		create: "[
			[[remove_object(b), add(_removed_widgets, [b])] | b <- level.chars, b is obj button_controller],

			if(cookie,
				_do_auto_login(cookie),
				_enter_login_or_register()
			)

			where cookie = lib.wesnoth.read_cookie()

		]",

		process: "if(_client, tbs_process(_client))",

		message_received: "
		debug(['MESSAGE', arg.message]);
		switch(message.type,
			'login_fail', [
				set(_error_message, string<- message.message);
				if(_registering, _enter_register_screen(), _enter_login_screen()),
			],
			'message', if(message.message is string, [
				set(_error_message, string<- message.message);
				if(_registering, _enter_register_screen(), _enter_login_screen()),
			]),
			'error', if(message.message is string, [
				set(_error_message, string<- message.message);
				if(_registering, _enter_register_screen(), _enter_login_screen()),
			]),
			'auto_login_fail', [
				_enter_login_screen()
			],
			'login_success', [
				_complete_login(int<- message.session_id, string<- message.username, string|null<- message.cookie, AccountDetails<- message.info, int<- message.info_version, int<- message.timestamp),
			],
			'registration_success', [
				_complete_login(int<- message.session_id, string<- message.username, string|null<- message.cookie, AccountDetails<- message.info, int<- message.info_version, int<- message.timestamp),
			],
		)
		where message = map<- arg.message",
	},
}

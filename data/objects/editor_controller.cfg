{
	id: "editor_controller",
	is_strict: true,
	use_absolute_screen_coordinates: true,
	hidden_in_game: true,

	properties: {
		screen_width: "int :: SCREEN_WIDTH",
		screen_height: "int :: SCREEN_HEIGHT",

		_default_tile: "string :: 'grass_green'",

		_side_xhtml: { type: "obj xhtml_controller" },

		_hex_map: { type: "{ width: int, x: int, y:int, zorder:int, tiles:[string]}" },

		_dragging: { type: "bool", default: false },
		_no_mouse_events: { type: "bool", default: false },

		render: "def() ->commands
		set(animation, lib.util.render_frame(c, ww, hh,
		[
			c.rectangle(0,0,ww,hh),
			c.set_source_rgba(0.2,0.2,0.2,1.0),
			c.fill(),
		]
		)) where ww = screen_width
		   where hh = screen_height
		   where c = canvas()",

		file_save_dialog: "def() ->builtin dialog
			dialog(me, {
				type: 'file_chooser', 
				open_dialog: false, 
				use_relative_paths: true,
				filters: [['CFG files', '.*\.cfg'],],
				default_path: MODULE_PATH + 'data/maps',
				width: screen_width/2,
				height: screen_height/2,
				x: screen_width/4,
				y: screen_height/4,
				zorder: 0,
			})
		",

		init_controls: "def() ->commands
		spawn('xhtml_controller', {
			zorder: zorder+1,
			x: screen_width - lib.wesnoth.py(320),
			y: 0,
			use_absolute_screen_coordinates: true,
			xhtml_doc: 'data/editor_sidebar.xhtml', 
			layout: [screen_width - lib.wesnoth.py(320), 0, lib.wesnoth.py(320), screen_height],
		}, [
			set(me._side_xhtml, child)
		])",

		set_tile_at_pixelpos: " def(int x, int y) -> commands [
			if(loc[0] < logical.width and loc[1] < logical.height and tile_type != null and logical.tile_at(loc).id != tile_type, 
				logical.set_tile_at(loc, tile_type))
		] where logical = level.hex_map.logical asserting level.hex_map != null,
				tile_type = if(active_element, active_element.getAttribute('id'), null) where active_element = _side_xhtml.document.activeElement asserting _side_xhtml.document != null,
				loc = level.hex_map.tile_loc_from_pixel_pos([x,y]) asserting level.hex_map != null",

		save_map: "def(string filename) ->commands 
			write_document(filename, doc, flags) 
				where flags = if(MODULE_OPTIONS.universe = 'dev', ['game_dir'], []),
					  doc   = level.hex_map.write() asserting level.hex_map != null
		",

		get_doc_or_die: "def() ->builtin document_object _side_xhtml.document asserting _side_xhtml.document != null",
		get_el_or_die: "def(string id) ->builtin element_object element asserting element != null where element = get_doc_or_die().getElementById(id)",
		
		do_save_map: "def() ->commands [
			//if(show_modal(file_save_dialog()), debug('saved'), debug('not save')),
			spawn('text_entry', { zorder:zorder+1, x:screen_width/4, y: screen_width/4, use_absolute_screen_coordinates: true })
		]",
		},

	events: {
		create: "[ 
			init_controls(), 
			set(x, 0), 
			set(y, 0), 
			set(level.dimensions, [0,0,screen_width,screen_height]), 
			set(_hex_map, { width: 40, x: 0, y: 0, zorder: 0, tiles: [_default_tile | a <- range(40), b <- range(20)] }),
			]; 
			set(level.hex_map, _hex_map)
			",

		"mouse_down*": "[
			if(not _no_mouse_events and arg.mouse_x < _side_xhtml.layout[0], [
				//debug(arg.mouse_x, arg.mouse_y, arg.mouse_button),
				//debug(level.hex_map.tile_loc_from_pixel_pos([arg.mouse_x, arg.mouse_y])) asserting level.hex_map != null,
				set_tile_at_pixelpos(arg.mouse_x, arg.mouse_y),
				set(_dragging, true)
			]),
		]",

		"mouse_move*": "[
			if(not _no_mouse_events and arg.mouse_x < _side_xhtml.layout[0] and _dragging, [
				set_tile_at_pixelpos(arg.mouse_x, arg.mouse_y),
			]),
		]",

		"mouse_up*": "[
			if(not _no_mouse_events and _dragging, set(_dragging, false))
		]",
	}
}

{
	id: "editor_controller",
	is_human: true,
	hidden_in_game: true,
	is_strict: true,

	properties: {
		screen_width: "int :: SCREEN_WIDTH",
		screen_height: "int :: SCREEN_HEIGHT",

		_default_tile: "string :: 'grass_green'",
		_default_map_width: "int :: 40",
		_default_map_height: "int :: 20",
		_default_tile_length: "int :: 72",

		_side_xhtml: { type: "obj xhtml_controller | null", default: null },

		_hex_map: { type: "{ width: int, x: int, y:int, zorder:int, tiles:[string]}|null", defafult: null },

		_dragging: { type: "bool", default: false },
		_allow_mouse_events: { type: "bool", default: true },

		_selection: { type: "string|null", defaul: null },
		_overlay: { type: "[string]|null", defaul: null },

		screen_x: { type: "int", default: 0, set: "set(_data, clamp(value, 0, level.dimensions[2] - SCREEN_WIDTH))" },
		screen_y: { type: "int", default: 0, set: "set(_data, clamp(value, 0, level.dimensions[3] - SCREEN_HEIGHT))" },
		
		_cursor: { type: "obj tile_cursor", init: "object('tile_cursor', {x: 0, y: 0, alpha: 0})" },
		
		render: "def() ->commands
		set(animation, lib.util.render_frame(c, ww, hh, [
			c.rectangle(0,0,ww,hh),
			c.set_source_rgba(0.2,0.2,0.2,1.0),
			c.fill(),
		])) where ww = screen_width
		   where hh = screen_height
		   where c = canvas()",

		file_save_dialog: "def() ->builtin file_chooser_dialog
			builtin file_chooser_dialog<-dialog(me, {
				type: 'file_chooser', 
				open_dialog: false, 
				use_relative_paths: true,
				filters: [['CFG files', '.*\.cfg'],],
				default_path: MODULE_PATH + 'data/maps',
				x: (screen_width - lib.wesnoth.py(800)) / 2,
				y: (screen_height - lib.wesnoth.py(600)) / 2,
				width: lib.wesnoth.py(800),
				height: lib.wesnoth.py(600),
				zorder: 0,
			})
		",

		file_open_dialog: "def() ->builtin file_chooser_dialog
			builtin file_chooser_dialog<-dialog(me, {
				type: 'file_chooser', 
				open_dialog: true, 
				use_relative_paths: true,
				filters: [['CFG files', '.*\.cfg'],],
				default_path: MODULE_PATH + 'data/maps',
				x: (screen_width - lib.wesnoth.py(800)) / 2,
				y: (screen_height - lib.wesnoth.py(600)) / 2,
				width: lib.wesnoth.py(800),
				height: lib.wesnoth.py(600),
				zorder: 0,
			})
		",		
		init_controls: "def() ->commands
			spawn('xhtml_controller', {
				zorder: zorder+1,
				x: screen_width - lib.wesnoth.py(320),
				y: 0,
				//use_absolute_screen_coordinates: true,
				xhtml_doc: 'data/editor_sidebar.xhtml', 
				layout: [screen_width - lib.wesnoth.py(320), 0, lib.wesnoth.py(320), screen_height],
			}, [
				set(me._side_xhtml, child)
			])
		",

		apply_overlay: "def(string tile) -> string|null
			if(_overlay = null, tile, tile + '|' + fold(_overlay, a + '^' + b))
		",

		set_tile_at_pixelpos: " def(int x, int y) -> commands [
			if(loc[0] > 0 and loc[1] > 0 and loc[0] < logical.width and loc[1] < logical.height and selection_str != null, 
				logical.set_tile_at(loc, selection_str)) where selection_str = apply_overlay(tile_at_loc),
		] where tile_at_loc = if(_selection = null, logical.tile_at(loc).id, _selection)
					where logical = level.hex_map.logical asserting level.hex_map != null,
						      loc = level.hex_map.tile_loc_from_pixel_pos([x,y]) asserting level.hex_map != null
		",

		save_map: "def(string filename) ->commands 
			write_document(filename, doc, flags) 
				where flags = if(MODULE_OPTIONS.universe = 'dev', ['game_dir'], []),
					  doc   = level.hex_map.write() asserting level.hex_map != null
		",
			
		load_map: "def(string filename) ->commands
			set(level.hex_map, get_document(filename))
		",

		get_doc_or_die: "def() ->builtin document_object _side_xhtml.document asserting _side_xhtml.document != null asserting _side_xhtml != null",
		get_el_or_die: "def(string id) ->builtin element_object element asserting element != null where element = get_doc_or_die().getElementById(id)",
		
		do_save_map: "def() ->commands [
			if(show_modal(builtin dialog <-fsd), save_map(fsd.relative_file_name)) where fsd = file_save_dialog(),
		]",
		
		do_load_map: "def() ->commands [
			if(show_modal(builtin dialog <-fod), load_map(fod.relative_file_name)) where fod = file_open_dialog(),
		]",

		do_set_selection: "def(string id) ->commands [
			debug('selection set to ' + id),
			if(size(id_list) > 1, 
				[set(_overlay, id_list), set(_selection, null)], 
				[set(_overlay, null), set(_selection, id)]
			) where id_list = split(id, ':'),
		]",

		do_clear_selection: "def() ->commands set(_selection, null)",

		mouse_pos: "[int,int]<- [screen_x + (int<-level.player.ctrl_mice[0][0]), screen_y + (int<-level.player.ctrl_mice[0][1])]",		
		},

	events: {	
		create: "set(level.dimensions, [0, 0, max(SCREEN_WIDTH, ((_default_map_width+2)*_default_tile_length*3)/4) + lib.wesnoth.py(320), max(SCREEN_HEIGHT, (_default_map_height+2)*_default_tile_length)]); [ 
			init_controls(), 
			set(x, 0), 
			set(y, 0), 
			set(_hex_map, { width: _default_map_width, x: 0, y: 0, zorder: 0, tiles: [_default_tile | a <- range(_default_map_width), b <- range(_default_map_height)] }),
			add_object(_cursor),
			set(_cursor.alpha, 255),
			]; 
			set(level.hex_map, _hex_map)
		",
			
		process: "[
			set(level.camera_position, [screen_x, screen_y]),
			set(level.lock_screen, [screen_x + SCREEN_WIDTH/2, screen_y + SCREEN_HEIGHT/2]),
			if(level.player.ctrl_down or 's' in ctrl_keys, add(screen_y, 10)),
			if(level.player.ctrl_up or 'w' in ctrl_keys, add(screen_y, -10)),
			if(level.player.ctrl_left or 'a' in ctrl_keys, add(screen_x, -10)),
			if(level.player.ctrl_right or 'd' in ctrl_keys, add(screen_x, 10)),
			if(level.hex_map and mouse_pos[0] < _side_xhtml.x + screen_x, set(_cursor.xy, level.hex_map.tile_pixel_pos_from_loc(tile_loc) where tile_loc = level.hex_map.tile_loc_from_pixel_pos(mouse_pos))),
		] asserting _side_xhtml != null",

		"mouse_down*": "[
			if(_allow_mouse_events and mouse_pos[0] < _side_xhtml.x + screen_x, [
				set_tile_at_pixelpos(arg.mouse_x, arg.mouse_y),
				set(_dragging, true)
			]) asserting _side_xhtml != null,
		]",

		"mouse_move*": "[
			if(_allow_mouse_events and mouse_pos[0] < _side_xhtml.x + screen_x and _dragging, [
				set_tile_at_pixelpos(arg.mouse_x, arg.mouse_y),
			]),
		] asserting _side_xhtml != null",

		"mouse_up*": "[
			if(_allow_mouse_events and _dragging, set(_dragging, false))
		]",
	}
}

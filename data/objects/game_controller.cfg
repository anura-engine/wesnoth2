{
	id: "game_controller",
	is_human: true,
	hidden_in_game: true,
	is_strict: true,

	properties: {
		player_session_id: "int :: 1",
		ai_session_id: "int :: 2",

		//The current canonical game state.
		_state: { type: "null|class game_state" },

		//The last state_id of the game that we received from the server.
		_state_id: { type: "int", default: -1 },

		//Our connection to the server.
		_client: { type: "object", init: "tbs_internal_client()" },

		//Connects to the local server and creates a game.
		create_game: "def() ->commands execute(me, [
			tbs_send(_client, {
				type: 'create_game',
				game_type: 'wesnoth2',
				users: [{user: 'human', session_id: player_session_id}, {user: 'ai', session_id: ai_session_id, bot: true, bot_type: 'default'}],
			})
		])",
	},

	on_create: "[
		create_game()
	]",

	on_process: "[
		//pump the network connection.
		tbs_process(_client)
	]",

	on_message_received: "[
	 switch(message.type,
		'game_created',
		[
			spawn('background', 256, 256, {zorder: -1}),

			//now that the game has been created, re-create our connection
			//to the server specifying what we have the session ID which
			//corresponds to player 1.
			set(_client, tbs_internal_client(player_session_id)),

			//start requesting updates from the server.
			fire_event('request_updates')
		],

		'game',
		//An update to the game state has come in.
		[
			debug('got game state'),
			set(_state_id, int<- message.state_id),
			set(_state, class game_state<- message.state),
			fire_event('show_game_state'),
			fire_event('request_updates')
		]
	)
	] where message = map<- arg.message",

	//Present the current game state to players.
	on_show_game_state: "if(_state, [
		[remove_object(xo) | xo<- level.chars, xo is obj xo],

		map(_state.tiles, spawn('xo', 124 + 136*key[0], 124 + 136*key[1], { state: if(value, 'X', 'O') })),
	])",

	//Send a message to the server asking for updates.
	on_request_updates: "if(_client.in_flight = 0,
		tbs_send(_client, {
			type: 'request_updates',
			state_id: _state_id,
			allow_deltas: false,
		})
	)",

	"on_mouse_down*": "if(cell_x in [0,1,2] and cell_y in [0,1,2] and _state != null and _state.nplayer = _state.current_player, [
		debug(['mouse down ', cell_x, cell_y]),
		tbs_send(_client, {
			type: 'move',
			loc: [cell_x,cell_y],
		})

	]) where cell_x = (mouse_x - 54)/136
	   where cell_y = (mouse_y - 54)/136
	   where mouse_x = int<- arg.mouse_x
	   where mouse_y = int<- arg.mouse_y",
}

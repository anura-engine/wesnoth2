{
	id: "game_controller",
	is_human: true,
	hidden_in_game: true,
	is_strict: true,
	prototype: ["game_controller_base"],

	types: {
		SelectionHandler: "function(obj action_display)->commands",
	},

	properties: {
		screen_width: "int :: SCREEN_WIDTH",
		screen_height: "int :: SCREEN_HEIGHT",

		_hex_shader_controller: { type: "null|obj hex_shader_controller" },

		hex_move_masks: {
			type: "null|[Loc]",

			set: "[
				set(_data, value),
				if(value = null, [
					set(level.hex_masks, filter(level.hex_masks, value.id != 'move')),
				], [
					if(existing,
						set(existing.locs, value),
						set(level.hex_masks, level.hex_masks + [{id: 'move', locs: value}])
					)
				] where existing = find(level.hex_masks, value.id = 'move')
				)
			]",
		},

		fog_masks: {
			type: "null|[Loc]",

			set: "[
				set(_data, value),
				if(value = null, [
					set(level.hex_masks, filter(level.hex_masks, value.id != 'fog')),
				], [
					if(existing,
						set(existing.locs, value),
						set(level.hex_masks, level.hex_masks + [{id: 'fog', locs: value}])
					)
				] where existing = find(level.hex_masks, value.id = 'fog')
				)
			]",
		},

		mouse_pos_abs: "[int,int]<-
		[(int<-level.player.ctrl_mice[0][0]), (int<-level.player.ctrl_mice[0][1])]",

		mouse_pos: "[int,int]<-
		[screen_x + (int<-level.player.ctrl_mice[0][0]), screen_y + (int<-level.player.ctrl_mice[0][1])]",

		player_session_id: "int :: 1",
		ai_session_id: "int :: 2",

		my_turn: "bool :: state.nplayer = state.current_player",

		_pass_button: { type: "null|obj button_controller" },

		pass_turn: "def() ->commands execute(me,
		[
			send({
				type: 'pass_turn',
			}),

			reset_input(),
		]
		)",

		create_action_pane: "def(class action a, map args={}, null|SelectionHandler fn=null) ->obj action_display
		obj action_display<-
			if(a is class summon,
				object('summon_display', {
					summon: a,
					controller: me,
					selection_handler: fn,
				} + args),

			   a is class conjuration,
			    object('conjuration_display', {
					conjuration: a,
					controller: me,
					selection_handler: fn,
				} + args),

				a is class attack,
				object('attack_display', {
					attack: a,
					controller: me,
					selection_handler: fn,
				} + args),

				a is class spell,
				object('spell_display', {
					spell: a,
					controller: me,
					selection_handler: fn,
				} + args),
			)
		",

		update_fog: "def() ->commands
		set(fog_masks, hexes)
		where hexes = lib.pathfind.controller_los(state, state.nplayer)
		",

		update_widgets: "def() ->commands
		if(have_pass_button != if(_pass_button, true, false),
		[
			remove_object(_pass_button),
			set(_pass_button, null),
			if(have_pass_button,
				spawn('button_controller', {
					x: screen_width - lib.gui.py(180),
					y: screen_height - lib.gui.py(50),
					text: 'Pass',
					on_click: me.pass_turn,
					zorder: lib.zorder.gui_pane + 10,
				}, [
					set(_pass_button, child),
				])
			)
		])
		where have_pass_button = (_state != null and my_turn and not _animation_blocked)
		",

		_animate_summons: "def(class animation.unit_summon info) ->commands
		;

		if(summoner != null and summoned_check = null,
		[
			spawn(info.summoned.avatar_name, {
			   mid_x: tile_mid_x(info.summoned.loc),
			   mid_y: tile_mid_y(info.summoned.loc),
			   unit: info.summoned,
			   controller: me,
			   alpha: 0,
			   on_board: false,
			}, [
				add(_unit_avatars, [obj unit_avatar<- child]),
				(obj unit_avatar<- child).summoned_animation(info),
			]),
			summoner.summon_animation_blocking(info),
		])
		  where summoner = find(level.chars, value is obj unit_avatar and value.unit._uuid = info.summoner._uuid)
		  where summoned_check = find(level.chars, value is obj unit_avatar and value.unit._uuid = info.summoned._uuid)",

		_animate_cast: "def(class animation.unit_cast info) ->commands
		if(unit,
		[
			map(info.targets, if(target_unit,
				if(info.spell.projectile != null, [

					spawn(info.spell.projectile, {
						controller: me,
						source: unit,
						target: target_unit,
					})
				]);

				schedule(20, target_unit.show_halo(info.spell.halo))

				) where target_unit = if(target_unit_instance, find(_unit_avatars, value.unit._uuid = target_unit_instance._uuid))
				  where target_unit_instance = find(state.units, value.loc = context.value)
			),

			unit.cast_animation_blocking(info),
		]
		)
		where unit = find(_unit_avatars, value.unit._uuid = info.caster._uuid)
		
		",

		_animate_death: "def(class animation.unit_death info) ->commands
		if(unit, unit.death_animation_blocking(info))
			where unit = find(_unit_avatars, value.unit._uuid = info.unit._uuid)
		",

		_animate_attack: "def(class animation.unit_battle battle_info, int attack_num=0) ->commands
		if(attack_num < size(battle_info.attacks),
		;
		if(attacker != null and defender != null,
		[
		if(info.attacker.loc[0] < info.defender.loc[0],
		   set(attacker.facing, 1),
		   info.attacker.loc[0] > info.defender.loc[0],
		   set(attacker.facing, -1)
		),

		if(info.attack.projectile != null, [
			schedule(attacker.launch_projectile_impact_point, ; defender.animate_damage(info.damage, info.critical)),

			schedule(attacker.launch_projectile_delay,
				spawn(info.attack.projectile, {
					controller: me,
					source: attacker,
					target: defender,
				})
			),

			[
				attacker.launch_projectile_animation_blocking(info, info.damage),
				sleep(attacker.launch_projectile_impact_point/60.0),
			];

			sleep(0.1);

			_animate_attack(battle_info, attack_num+1)
		],
		[
			schedule(attacker.melee_impact_point, ; defender.animate_damage(info.damage, info.critical)),

			attacker.melee_attack_animation_blocking(info, defender, info.damage);

			sleep(0.1);

			_animate_attack(battle_info, attack_num+1)
		]
		)

		]
		)

		where attacker = find(_unit_avatars, value.unit._uuid = info.attacker._uuid)
		where defender = find(_unit_avatars, value.unit._uuid = info.defender._uuid)
		where info = battle_info.attacks[attack_num]
		)
		",

		_update_game_needed: { type: "bool", default: false },

		_spellbook_pane: { type: "null|obj spellbook_pane" },

		open_spellbook: "def() ->commands
			spawn('spellbook_pane', {
				mid_x: (screen_width - if(_sidebar != null, _sidebar._width, 0))/2,
				mid_y: screen_height/2,
				zorder: 10000,
				use_absolute_screen_coordinates: true,
				spellbook: myplayer.spellbook,
				controller: me,
			}, [
				set(_spellbook_pane, child)
			])
		",

		are_locs_visible: "def([Loc] locs) ->bool
		locs = [] or fog_masks = null or find(locs, value in fog_masks) != null
		",

		are_locs_on_screen: "def([Loc] locs) ->bool
		if(off_screen, false, true)
			where off_screen = find(locs,
				xpos < screen_x1 or xpos > screen_x2 or
				ypos < screen_y1 or ypos > screen_y2
				where xpos = tile_mid_x(value)
				where ypos = tile_mid_y(value)
			)
			where screen_x1 = screen_x+lib.gui.py(60)
			where screen_y1 = screen_y+lib.gui.py(60)
			where screen_x2 = screen_x + SCREEN_WIDTH-lib.gui.py(200)
			where screen_y2 = screen_y + SCREEN_HEIGHT-lib.gui.py(60)
		",

		present_animation_blocking: "def(class animation anim) ->commands
		if(are_locs_visible(anim.focus),
			if(are_locs_on_screen(anim.focus),
			   _play_animation_internal(anim),

			   screen_focus_animated(focus_x, focus_y, 16, ; _play_animation_internal(anim))

			   where focus_x = ((int<-min(all_x)) + (int<-max(all_x)))/2
			   where focus_y = ((int<-min(all_y)) + (int<-max(all_y)))/2
			   where all_x = map(focus, tile_mid_x(value))
			   where all_y = map(focus, tile_mid_y(value))
			   where focus = filter(anim.focus, fog_masks = null or (value in fog_masks))
			)
		)
		",

		next_fog_blend: { type: "decimal", default: 0.0 },

		unit_animate_to_loc: "def(obj unit_avatar unit, Loc loc) ->commands
		if(unit.unit.controller = state.nplayer, [
			let start_loc = unit.unit.loc;
			set(unit.unit.loc, loc);
			set(next_fog_blend, 0.0);
			animate(me, {
				next_fog_blend: 1.0,
			}, {
				duration: 8,
				on_complete: ; (let start = unit.unit.loc; set(unit.unit.loc, loc); update_fog(); set(unit.unit.loc, start); schedule(1, set(next_fog_blend, 0.0))),
			});

			set(level.hex_masks, filter(level.hex_masks, value.id != 'next_fog') + [{id: 'next_fog', locs: hexes}])
			where hexes = lib.pathfind.controller_los(state, state.nplayer);
			set(unit.unit.loc, start_loc)
		])
		",

		_animate_move: "def(class animation.unit_move anim) ->commands
		     if(avi != null, avi.animate_movement(anim))
				where avi = find(_unit_avatars, value.unit._uuid = anim.unit._uuid)
		",

		_play_animation_internal: "def(class animation anim) ->commands

		if(anim is class animation.unit_move, 
			 _animate_move(anim),
		   anim is class animation.unit_battle,
		     _animate_attack(anim),
		   anim is class animation.unit_summon,
		     _animate_summons(anim),
		   anim is class animation.unit_death,
		     _animate_death(anim),
		   anim is class animation.unit_cast,
		     _animate_cast(anim),
		   anim is class animation.unit_heal,
		     if(avi != null, avi.animate_heal(anim)) where avi = find(_unit_avatars, value.unit._uuid = anim.unit._uuid)
		)
		",

		_villages: { type: "[obj village]", default: [] },

		_building_avatars: { type: "[obj unit_avatar]", default: [] },

		_unit_avatars: { type: "[obj unit_avatar]", default: [] },

		_initial_focus: { type: "bool", default: false },

		update_unit_avatars: "def() ->commands
		[
			[ remove_object(u) | u <- _unit_avatars, u not in new_unit_avatars],

			[ add_object(u) | u <- new_unit_avatars, u not in _unit_avatars],

			set(_unit_avatars, new_unit_avatars),

			[[
				set(u.hidden_in_fog, fog_masks != null and (u.unit.loc not in fog_masks)),
				set(u.mid_x, tile_mid_x(u.unit.loc)),
				set(u.mid_y, tile_mid_y(u.unit.loc))
			 ] | u <- new_unit_avatars
			],

			[ u.update() | u<- new_unit_avatars],

			if(state.unit_moving and state.unit_moving.controller = state.nplayer,
				; start_moving_unit(state.unit_moving)
			),

			if(_initial_focus = false and local_ruler and state.current_player = state.nplayer, [
				screen_focus_loc(local_ruler.loc),
				set(_initial_focus, true),
			], _initial_focus = true and local_ruler and state.current_player = state.nplayer, [
				screen_focus_animated(tile_mid_x(local_ruler.loc), tile_mid_y(local_ruler.loc)),
			]) where local_ruler = find(state.units, value.is_ruler and value.controller = state.nplayer),

		] where new_unit_avatars = [obj unit_avatar]<- map(state.units,
			if(existing, existing,
			   object(value.avatar_name, {
				  mid_x: tile_mid_x(value.loc),
				  mid_y: tile_mid_y(value.loc),
				  unit: value,
				  controller: me,
				  hidden_in_fog: fog_masks != null and (value.loc not in fog_masks),
			   })
			)
			where existing = find(_unit_avatars, value.unit._uuid = context.value._uuid))
		",

		update_building_avatars: "def() ->commands
		[
			[ remove_object(u) | u <- _building_avatars, u not in new_building_avatars],

			[ add_object(u) | u <- new_building_avatars, u not in _building_avatars],

			set(_building_avatars, new_building_avatars),

			[[set(u.mid_x, tile_mid_x(u.unit.loc)), set(u.mid_y, tile_mid_y(u.unit.loc))] | u <- new_building_avatars],

			[ u.update() | u<- new_building_avatars],

		] where new_building_avatars = [obj unit_avatar]<- map(state.buildings,
			if(existing, existing,
			   object(value.avatar_name, {
				  mid_x: tile_mid_x(value.loc),
				  mid_y: tile_mid_y(value.loc),
				  unit: value,
				  controller: me,
			   })
			)
			where existing = find(_building_avatars, value.unit = context.value))
		",

		update_villages: "def() ->commands
			map(_villages, ; value.update())
		",

		_cursor: { type: "obj tile_cursor", init: "object('tile_cursor', {x: 0, y: 0, alpha: 0})" },
		_cursor_loc: { type: "[int,int]", default: [0,0], set: "if(_data != value, [set(_data, value), set_terrain_label(value)])" },

		myplayer: "class player :: state.players[state.nplayer]",

		hex_map: "hex_map <- level.hex_map",

		tile_mid_x: "def(Loc loc) ->int
			tile_pixel_pos_from_loc(loc)[0] + hex_map.tile_height/2
		",

		tile_mid_y: "def(Loc loc) ->int
			tile_pixel_pos_from_loc(loc)[1] + hex_map.tile_height/2
		",

		//Unit we are currently moving.
		_moving_unit: { type: "null|obj unit_avatar" },
		_moving_unit_locs: { type: "null|[Loc]" },
		_attacking_unit_locs: { type: "null|[Loc]" },
		_target_locs: { type: "null|[Loc]" },

		_moving_arrow: { type: "null|obj arrow", set: "if(_data != value, [remove_object(_data), set(_data, value), set(_moving_arrow_path, null)])" },
		_moving_arrow_path: { type: "null|[Loc]" },

		unit_pane: {
			type: "null|obj unit_pane",
			set: "if(_data != value, [
				remove_object(_data),
				set(_data, value),
			])",
		},

		_set_move_arrow: "def(Loc loc) ->commands
		if(_moving_unit,

			if(path.path != _moving_arrow_path,
			[
				spawn('arrow', {
					zorder: 1000,
					points: map(path.path, [pos[0] + hex_map.tile_height/2, pos[1] + hex_map.tile_height/2] where pos = tile_pixel_pos_from_loc(value)),
				}, [
					set(_moving_arrow, child),
				]),
				set(_moving_arrow_path, path.path),
			])
			where path = lib.pathfind.find_path_to_loc(state, _moving_unit.unit, loc),
		)
		",

		_choose_adjacent_attack_loc: "def(Loc loc) ->null|Loc
		if(_moving_unit and _moving_unit_locs and _moving_unit.unit.has_moved = 0 and state.unit_at_loc(loc) and state.unit_at_loc_or_die(loc).controller != _moving_unit.unit.controller and find(_moving_unit_locs, loc in state.logical_map_assert.adjacent_tiles(value)) != null,
			target_loc
			where target_loc = choose(possible_locs, -(dx*dx + dy*dy) where dx = tile_mid_x(value) - mouse_x where dy = tile_mid_y(value) - mouse_y)
			where mouse_x = screen_x + lib.gui.mouse_pos(level)[0]
			where mouse_y = screen_y + lib.gui.mouse_pos(level)[1]
			where possible_locs = filter(state.logical_map_assert.adjacent_tiles(loc), value in _moving_unit_locs)
		)
		",

		_process_tile_pos: "def(Loc loc) ->commands
		[
			if(_moving_unit and _moving_unit_locs and (loc in _moving_unit_locs),

			  _set_move_arrow(loc),

			  _choose_adjacent_attack_loc(loc) != null,
			    
				_set_move_arrow(Loc<- _choose_adjacent_attack_loc(loc)),

			   set(_moving_arrow, null)
			),
			
			//set the mouse cursor
			if(
			_moving_unit and _target_locs and (_cursor_loc in _target_locs) and find(level.chars, value is obj spell_display and value.selected) != null,
				set_mouse_cursor('normal'),
			
			my_turn and (state.unit_moving and u = state.unit_moving or _moving_unit and _moving_unit.unit = u),
				set_mouse_cursor('guard'),
			_moving_unit and _moving_unit_locs and (_cursor_loc in _moving_unit_locs),
				set_mouse_cursor('move'),
			_moving_unit and _attacking_unit_locs and (_cursor_loc in _attacking_unit_locs),
				set_mouse_cursor('attack'),
			_choose_adjacent_attack_loc(loc) != null,
				set_mouse_cursor('attack'),
				set_mouse_cursor('normal')
			)
			where u = state.unit_at_loc(_cursor_loc)
		]
		",

		reset_input: "def() ->commands
		[
			set(_moving_unit, null),
			set(_moving_arrow, null),
			set(_moving_unit_locs, null),
			set(_attacking_unit_locs, null),
			set(_target_locs, null),
			set(hex_move_masks, null),
		]
		",

		debug_unit: "def(string name, null|Loc base_loc=null) ->commands
			if(name not in lib.wesnoth.all_summons(),
			   debug('No such unit'),
			   send({
					type: 'debug_unit',
					loc: vacant_loc,
					summon: name,
			   })
			)
			where vacant_loc =
			  find_or_die([[xpos+loc[0],ypos+loc[1]] | xpos<- range(10), ypos<- range(10)],
				state.unit_at_loc(value) = null)
			where loc = if(base_loc != null, base_loc, [4,4])
		",

		pass_spellbook: "def() ->commands
		[
			remove_object(_spellbook_pane),
			set(_spellbook_pane, null),
		]
		",

		memorize: "def(class unit u, class action a) ->commands
		execute(me, [
			send({
				type: 'memorize',
				unit_id: u._uuid,
				action_id: a._uuid,
			}),

			remove_object(_spellbook_pane),
			set(_spellbook_pane, null),
			reset_input(),
		])
		",

		_show_unit_pane: "def(class unit u) ->commands
			spawn('unit_pane', {
				unit: u,
				controller: me,
				x2: SCREEN_WIDTH-lib.gui.py(10),
				y: lib.gui.py(20),
				_width: lib.gui.py(180),
				zorder: lib.zorder.gui_pane + 10,
				show_meditate: true,
			}, [
				set(unit_pane, child),
			])
		",

		tile_clicked: "def() ->commands tile_selected(_cursor_loc)",


		tile_selected: "def(Loc tile_loc) ->commands execute(me, [

		if(u and u.controller = state.nplayer and state.unit_moving = null,
			_show_unit_pane(u)
		),
		
		if(
			_moving_unit and _target_locs and (tile_loc in _target_locs) and find(level.chars, value is obj spell_display and value.selected) != null,

			[
				send({
					type: 'cast_spell',
					unit_id: _moving_unit.unit._uuid,
					targets: [tile_loc],
					spell_id: display.spell._uuid,
				}),

				set(display.selected, false),

				reset_input(),
			]
			where display = find_or_die(level.chars, value is obj spell_display and value.selected),

		my_turn and _moving_unit and (state.unit_moving and u = state.unit_moving or u = _moving_unit.unit),
			guard_unit(),

		u and u.controller = state.nplayer and state.current_player = state.nplayer and u.has_moved < u.num_moves and not state.unit_moving,
			start_moving_unit(u),

			_moving_unit and _target_locs and (tile_loc in _target_locs) and find(level.chars, value is obj summon_display and value.selected) != null,

			[
				send({
					type: 'summon_unit',
					unit_id: _moving_unit.unit._uuid,
					loc: tile_loc,
					summon: display.summon.name,
				}),

				set(display.selected, false),

				reset_input(),
			]
			where display = find_or_die(level.chars, value is obj summon_display and value.selected),

			_moving_unit and _target_locs and (tile_loc in _target_locs) and find(level.chars, value is obj conjuration_display and value.selected) != null,

			[
				send({
					type: 'conjure_building',
					unit_id: _moving_unit.unit._uuid,
					loc: tile_loc,
					conjure: display.conjuration.name,
				}),

				set(display.selected, false),

				reset_input(),
			]
			where display = find_or_die(level.chars, value is obj conjuration_display and value.selected),

			_moving_unit and _moving_unit_locs and (tile_loc in _moving_unit_locs),
			[
				send({
					type: 'move_unit',
					unit_id: _moving_unit.unit._uuid,
					path: lib.pathfind.find_path_to_loc(state, _moving_unit.unit, tile_loc).path,
				}),

				reset_input(),
			],

			_moving_unit and u and _attacking_unit_locs and (tile_loc in _attacking_unit_locs) and _moving_unit.unit.attacks,
			[
				send({
					type: 'attack_unit',
					unit_id: _moving_unit.unit._uuid,
					target_unit_id: u._uuid,
					attack: if(selected_attack, selected_attack.attack.name, _moving_unit.unit.attacks[0].name),
				}),

				reset_input(),
			] where selected_attack = find(level.chars, value is obj attack_display and value.selected),

			u != null and _moving_unit != null and _choose_adjacent_attack_loc(tile_loc) != null,
			[
				send({
					type: 'multimessage',
					messages: [{
						type: 'move_unit',
						unit_id: _moving_unit.unit._uuid,
						path: lib.pathfind.find_path_to_loc(state, _moving_unit.unit, target_loc).path,
					}, {
						type: 'attack_unit',
						unit_id: _moving_unit.unit._uuid,
						target_unit_id: u._uuid,
						attack: if(selected_attack, selected_attack.attack.name, _moving_unit.unit.attacks[0].name),
					}],
				}),

				reset_input(),
			] where target_loc = Loc<- _choose_adjacent_attack_loc(tile_loc)
			  where selected_attack = find(level.chars, value is obj attack_display and value.selected),

			state.unit_moving = null,
			[
				reset_input(),
			]

		)
		] where u = state.unit_at_loc(tile_loc)
		)",

		tile_right_clicked: "def() ->commands execute(me, [
			reset_input()
		])",

		guard_unit: "def() ->commands
		execute(me,
		[
			debug('guard_unit'),
			send({
				type: 'guard_unit',
				unit_id: _moving_unit.unit._uuid,
			}),

			reset_input(),
		]
		)
		asserting _moving_unit",

		start_casting: "def(class spell s) ->commands
		if(unit_pane != null,
		[
			set(_moving_unit, find(level.chars, value is obj unit_avatar and value.unit = unit_pane.unit)),
			set(_moving_unit_locs, []),
			set(_moving_arrow, null),
			set(_attacking_unit_locs, []),
			set(_target_locs, valid_locs),

			set(hex_move_masks, valid_locs),
		] where valid_locs = s.possible_targets(unit_pane.unit, state)
		)
		",

		start_summoning: "def(class summon s) ->commands
		if(unit_pane != null,
		[
			set(_moving_unit, find(level.chars, value is obj unit_avatar and value.unit = unit_pane.unit)),
			set(_moving_unit_locs, []),
			set(_moving_arrow, null),
			set(_attacking_unit_locs, []),
			set(_target_locs, valid_locs),

			set(hex_move_masks, valid_locs),
		] where valid_locs = unit_pane.unit.valid_summoning_locs(state)
		)
		",

		start_conjuring: "def(class conjuration s) ->commands
		if(unit_pane != null,
		[
			set(_moving_unit, find(level.chars, value is obj unit_avatar and value.unit = unit_pane.unit)),
			set(_moving_unit_locs, []),
			set(_moving_arrow, null),
			set(_attacking_unit_locs, []),
			set(_target_locs, valid_locs),

			set(hex_move_masks, valid_locs),
		] where valid_locs = unit_pane.unit.valid_conjuring_locs(state)
		)
		",

		start_moving_unit: "def(class unit u) ->commands
		if(not avi,
		[
			set(unit_pane, null),
			reset_input(),
		],

		[
		set(_moving_unit, avi),
		set(_moving_unit_locs, locs),
		set(_moving_arrow, null),
		set(_attacking_unit_locs, target_locs),
		set(_target_locs, null),

		set(hex_move_masks, [u.loc] + locs + target_locs),
		]

		where target_locs = map(u.possible_targets(state), value.loc)
		where locs = lib.pathfind.find_paths(state, u)
		)
		where avi = find(_unit_avatars, value.unit._uuid = u._uuid)
		",

		attack_selected: "def(class unit u) ->commands
		[
			set(_moving_unit_locs, []),
			set(_moving_arrow, null),

			set(hex_move_masks, target_locs),
		]
		where target_locs = map(u.possible_targets(state), value.loc)
		",

		screen_x: { type: "int", default: 0, set: "set(_data, clamp(value, 0, level.dimensions[2] - SCREEN_WIDTH))" },
		screen_y: { type: "int", default: 0, set: "set(_data, clamp(value, 0, level.dimensions[3] - SCREEN_HEIGHT))" },

		loc_on_board: "def(Loc loc) ->bool
			loc[0] >= 0 and loc[1] >= 0 and loc[0] < state.logical_map_assert.width and loc[1] < state.logical_map_assert.height
		",

		_terrain_label: { type: 'null|obj label' },
		set_terrain_label: "def(Loc loc) ->commands
		[
			remove_object(_terrain_label),
			spawn('label', {
				_text: [sprintf('(%d,%d) %s %+d%% def, %d move', loc[0], loc[1], info.name, info.defense, info.move_cost)],
				use_absolute_screen_coordinates: true,
				zorder: 20000,
				_valign: 'top',
				_halign: 'left',
				y: 4,
				x: SCREEN_WIDTH-190,
				_font_size: 12,
			}, [
				set(_terrain_label, child),
			])
			
			where info = lib.terrain.stats(state, loc, if(unit_pane, unit_pane.unit)),
			
		]
		",

		_sidebar: { type: "null|obj sidebar_pane" },
		_create_sidebar: "def() ->commands
		if(_sidebar = null,
			spawn('sidebar_pane', {
				y: 0,
				x2: SCREEN_WIDTH,
				_width: lib.gui.py(200),
				_height: SCREEN_HEIGHT,
				zorder: lib.zorder.gui_pane,
			}, [
				set(_sidebar, child)
			])
		)
		",

		show_turn_banner: "def(int nturn) ->commands
			spawn('label', {
				zorder: 10000,
				_text: ['Round ' + str(nturn)],
				use_absolute_screen_coordinates: true,
				_font_size: lib.gui.px(48),
				mid_x: SCREEN_WIDTH/2-lib.gui.py(100 + 300),
				mid_y: SCREEN_HEIGHT/2,
				alpha: 0,
			}, [
				animate(child, {
					mid_x: SCREEN_WIDTH/2-lib.gui.py(100),
					alpha: 255,
				}, {
					duration: 20,
				}),

				schedule(70,
					animate(child, {
						mid_x: SCREEN_WIDTH/2-lib.gui.py(100 - 300),
						alpha: 0,
					}, {
						duration: 20,
						on_complete: remove_object(child),
					})
				)
			])
		",

		_prev_ctrl_keys: { type: "null|[string]" },

		key_pressed: "def(string k) ->commands
		if(k = 'n', select_next_unit(),
		   k = 'p', select_next_unit(true),
		   k = ' ' and my_turn and _moving_unit, guard_unit()
		)",
		key_released: "def(string k) ->commands null",

		screen_focus_loc: "def(Loc loc) ->commands [
			set(screen_x, tile_mid_x(loc) - SCREEN_WIDTH/2),
			set(screen_y, tile_mid_y(loc) - SCREEN_HEIGHT/2),
		]",

		screen_focus_animated: "def(int target_x, int target_y, int duration=20, commands on_complete=null) ->commands [
			animate(me, {
				screen_x: clamp(target_x - SCREEN_WIDTH/2, 0, level.dimensions[2] - SCREEN_WIDTH),
				screen_y: clamp(target_y - SCREEN_HEIGHT/2, 0, level.dimensions[3] - SCREEN_HEIGHT),
			}, {
				duration: duration,
				easing: lib.math.ease_in_out_cubic,
				on_complete: on_complete,
				sleep: true,
			})
		]",

		select_next_unit: "def(bool prev=false) ->commands
		if(next_unit != null, [
			tile_selected(next_unit.loc),

			screen_focus_loc(next_unit.loc),
		])
		where next_unit = find(units, value.controller = state.nplayer)
		where units = if(prev, reverse(units_unsorted), units_unsorted)
		where units_unsorted = if(current_index < 0, state.units,
						state.units[current_index+1:] + state.units[:current_index]
		                )
		where current_index = if(_moving_unit != null, index(state.units, _moving_unit.unit), -1)
		",

		present_game_state: "def() ->commands
		if(_state, [

			if(state.nround > 1 and state.previous.nround != state.nround,
				show_turn_banner(state.nround)

			),


			if(level.hex_map = null,
				set(level.hex_map, _state.game_map);
				set(level.dimensions, [0, 0, max(SCREEN_WIDTH, (hex_map.width*hex_map.tile_height*3)/4), max(SCREEN_HEIGHT, hex_map.height*hex_map.tile_height)]);
				map(_state.villages,
					spawn('village', {
						loc: key,
						mid_x: tile_mid_x(key),
						mid_y: tile_mid_y(key),
						game_controller: me,
					}, [
						add(_villages, [child]),
					])
				)
			);

			set(_state.logical_map, construct('logical_map', _state.game_map));

			update_fog();
			update_unit_avatars();
			update_building_avatars();
			update_villages();
			update_widgets();
			if(unit_pane, unit_pane.update());
			set(_update_game_needed, false)
		])
		",
	},

	events: {

		create: "set(level.dimensions, [0,0,1024*4,768*4]); [
			set(level.lock_screen, [screen_x + SCREEN_WIDTH/2, screen_y + SCREEN_HEIGHT/2]),

			_create_sidebar(),
			
			add_object(_cursor),
			set(_cursor.alpha, 255),

			spawn('hex_shader_controller', { }, [set(_hex_shader_controller, child)] ),

		]",

		being_removed: "
			remove_object(_hex_shader_controller)
		",

		process: "[
			update_widgets(),

			if(_prev_ctrl_keys != null,
			[
			   [key_pressed(k) | k <- level.player.ctrl_keys, k is string, k not in _prev_ctrl_keys],
			   [key_released(k) | k <- _prev_ctrl_keys, k is string, k not in level.player.ctrl_keys],
			]
			),

			set(_prev_ctrl_keys, filter(level.player.ctrl_keys, value is string)),

			set(level.camera_position, [screen_x, screen_y]),
			set(level.lock_screen, [screen_x + SCREEN_WIDTH/2, screen_y + SCREEN_HEIGHT/2]),

			if(level.hex_map and not _spellbook_pane,
			[
				set(_cursor.xy, tile_pixel_pos_from_loc(tile_loc)),
				set(_cursor_loc, tile_loc),
				_process_tile_pos(tile_loc),
			] where tile_loc = tile_loc_from_pixel_pos(mouse_pos)
			),

			if(level.player.ctrl_down, add(screen_y, 10)),
			if(level.player.ctrl_up, add(screen_y, -10)),
			if(level.player.ctrl_left, add(screen_x, -10)),
			if(level.player.ctrl_right, add(screen_x, 10)),
		]",

	},
}

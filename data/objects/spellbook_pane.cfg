{
	id: "spellbook_pane",
	is_strict: true,

	properties: {
		controller: { type: "obj game_controller" },

		spellbook: { type: "class spellbook" },

		_width: { type: "int", default: 800 },
		_height: { type: "int", default: 600 },

		render: "def() ->commands
		set(animation, lib.util.render_frame(c, ww, hh,
		[
			c.rectangle(0,0,ww,hh),
			c.set_source_rgba(0.2,0.2,0.2,1.0),
			c.fill(),

			c.rectangle(0,0,ww,hh),
			c.set_line_width(2),
			c.set_source_rgba(0.4,0.4,0.4,1.0),
			c.stroke(),
		]
		)
		where ww = _width
		where hh = _height
		where c = canvas()
		)
		",

		current_page: { type: "int", default: 0 },
		num_pages: "int :: size(spellbook.actions)/9 + if(size(spellbook.actions)%9, 1, 0)",

		previous_page: "def() ->commands if(current_page > 0, [
			add(current_page, -1);
			_show_page(current_page)
		])",
		next_page: "def() ->commands if(current_page < num_pages-1, [
			add(current_page, 1);
			_show_page(current_page)
		])",

		_page_label: { type: "null|obj label" },
		_update_page_label: "def() ->commands
			remove_object(_page_label);
			spawn('label', {
				zorder: zorder+1,
				_text: ['Page ' + str(current_page+1) + '/' + str(num_pages)],
				use_absolute_screen_coordinates: true,
				_font_size: 14,
				mid_x: mid_x,
				y2: y2-5,
			}, [
				set(_page_label, child),
			])
		",

		_spawn_objects: "def() ->commands
		[
			_update_page_label(),

			spawn('button_controller', {
				text: 'Close',
				zorder: zorder+1,
				x2: x2-10,
				y2: y2-10,
				on_click: def() ->commands controller.pass_spellbook(),
				use_absolute_screen_coordinates: true,
			}),

			spawn('game_icon', {
				icon: 'library-arrow.svg',
				size: 40,
				facing: -1,
				force_no_alpha: true,
				mid_x: mid_x - 70,
				y2: y2-10,
				zorder: zorder+1,
				click_handler: def(obj game_icon icon) ->commands me.previous_page(),
				mouse_enter_handler: def(obj game_icon icon) ->commands set(icon.brightness, 512),
				mouse_leave_handler: def(obj game_icon icon) ->commands set(icon.brightness, 255),
				use_absolute_screen_coordinates: true,
			}),

			spawn('game_icon', {
				icon: 'library-arrow.svg',
				size: 40,
				facing: 1,
				force_no_alpha: true,
				mid_x: mid_x + 70,
				y2: y2-10,
				zorder: zorder+1,
				click_handler: def(obj game_icon icon) ->commands me.next_page(),
				mouse_enter_handler: def(obj game_icon icon) ->commands set(icon.brightness, 512),
				mouse_leave_handler: def(obj game_icon icon) ->commands set(icon.brightness, 255),
				use_absolute_screen_coordinates: true,
			}),

		];
		_show_page(current_page)
		",

		_show_page: "def(int npage) ->commands
			map(_visible_displays, remove_object(value));
			set(_visible_displays, displays[(9*npage):(9*npage+9)]);
			map(_visible_displays, [
				add_object(value),
				set(value.zorder, zorder+10),
				set(value.mid_x, x + 100 + 200*xpos),
				set(value.mid_y, y + 80 + 120*ypos),
			] where xpos = index%3
			  where ypos = index/3)
		",

		displays: { type: "[obj action_display]", default: [] },
		_visible_displays: { type: "[obj action_display]", default: [] },
	},

	on_create: "set(displays, map(spellbook.actions, controller.create_action_pane(value, {}, (def(obj action_display action)->commands
			if(controller.unit_pane != null, [
				set(controller.unit_pane.new_action_hint, action),
				controller.memorize(controller.unit_pane.unit, value)
			])
		)
	))); render(); _spawn_objects()",
	on_being_removed: "[
		map(spawned_children, remove_object(value)),
		[set(c.selected, false) | c <- level.chars, c is obj meditate_display],
	]",
}

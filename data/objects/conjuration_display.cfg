{
	id: "conjuration_display",
	prototype: ["action_display"],

	properties: {

		conjuration: { type: "class conjuration" },
		action: "class action :: conjuration",

		update: "def() ->commands render()",

		render: "def() ->commands
		set(animation, lib.util.render_frame(c, ww, hh,
		[
			c.rectangle(0,0,ww,hh),
			if(selected,
				c.set_source_rgba(0.6,0.3,0.3,1.0),
				has_mouseover,
				c.set_source_rgba(0.5,0.4,0.4,1.0),
				c.set_source_rgba(0.3,0.3,0.3,1.0)
			),
			c.fill(),

			c.rectangle(0,0,ww,hh),
			c.set_source_rgba(0.4,0.4,0.4,1.0),
			c.set_line_width(2),
			c.stroke(),

			c.set_source_rgba(1,1,1,1),

			map(fragments, [
				c.save(),
				c.translate(66, 4),
				c.set_source_color(value.color),
				value.path,
				c.fill(),
				c.restore(),
			]),
		]
		where fragments = c.markup_text(
			q(<b>) + conjuration.name + q(</b>) + if(conjuration.ncopies < 0, '', q( x) + str(conjuration.ncopies)) + q(\n) +
			if(conjuration.mana_cost,
			if(not can_afford, q(<font color='red'>), '') +
				str(conjuration.mana_cost) + ' mana\n' +
			if(not can_afford, q(</font>), '')
					
			where can_afford = (parent_unit = null or parent_unit.mana > conjuration.mana_cost),
			''),
			{ width: 200, scale: 0.8 }
		)
		))
		where ww = _width
		where hh = _height
		where c = canvas()
		",

		_spawn_avatar: "def() ->commands [
			remove_object(_avatar),
			spawn('building_avatar_' + conjuration.building_obj.id, {
				mid_x: x+32,
				mid_y: mid_y,
				unit: conjuration.building_obj,
				controller: controller,
				on_board: false,
				zorder: zorder+1,
				use_absolute_screen_coordinates: true,
			}, [
				set(_avatar, obj building_avatar<- child),
			]),
		]
		",

		_avatar: { type: "null|obj building_avatar" },
		_preview: { type: "null|obj unit_pane" },

		on_select: "def() ->commands
			controller.start_conjuring(conjuration)
		",

		mouse_enter: "def() ->commands [
			remove_object(_preview),
			spawn('unit_pane', {
				unit: lib.wesnoth.create_building(conjuration.name, conjuration.building),
				controller: controller,
				x2: if(mid_x > SCREEN_WIDTH/2, x - 20, x2 + 220),
				mid_y: mid_y,
				zorder: zorder+20,
				has_border: true,
			}, [
				set(_preview, child),
			]),
		]",
		mouse_leave: "def() ->commands remove_object(_preview); set(_preview, null)",

		move_avatar: "def() ->commands
		if(_avatar != null, [
			set(_avatar.mid_x, x+32),
			set(_avatar.mid_y, mid_y),
			set(_avatar.zorder, zorder+1),
		])
		",
	},

	events: {
		process: "
			move_avatar()
		",

		being_added: "if(_avatar, add_object(_avatar), _spawn_avatar())",
		being_removed: "remove_object(_avatar); remove_object(_preview)",

		create: "render()",
	},
}

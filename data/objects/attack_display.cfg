{
	id: "attack_display",
	is_strict: true,
	use_absolute_screen_coordinates: true,

	properties: {
		_width: 170,
		_height: 70,

		has_mouseover: { type: "bool", default: false },
		selected: { type: "bool", default: false, set: "if(value != _data, [set(_data, value); render()])" },

		controller: { type: "obj game_controller" },

		attack: { type: "class attack" },

		update: "def() ->commands render()",

		render: "def() ->commands
		set(animation, lib.util.render_frame(c, ww, hh,
		[
			c.rectangle(0,0,ww,hh),
			if(selected,
				c.set_source_rgba(0.6,0.3,0.3,1.0),
				has_mouseover,
				c.set_source_rgba(0.5,0.4,0.4,1.0),
				c.set_source_rgba(0.3,0.3,0.3,1.0)
			),
			c.fill(),

			c.rectangle(0,0,ww,hh),
			c.set_source_rgba(0.4,0.4,0.4,1.0),
			c.set_line_width(2),
			c.stroke(),

			c.set_source_rgba(1,1,1,1),

			map(fragments, [
				c.save(),
				c.translate(66, 4),
				value.path,
				c.fill(),
				c.restore(),
			]),
		]
		where fragments = c.markup_text(
			q(<b>) + attack.name + q(</b>\n) +
			str(attack.damage) + ' damage\n' +
			if(attack.mana_cost, str(attack.mana_cost) + ' mana\n', ''),
			{ width: 200, scale: 1.0 }
		)
		))
		where ww = _width
		where hh = _height
		where c = canvas()
		",

		_spawn_image: "def() ->commands [
			remove_object(_image),
			spawn('image_widget', {
				x: x+4,
				y: y+4,
				zorder: zorder+10,
				image: 'attacks/' + attack.icon,
				image_area: [0,0,60,60],
				draw_width: 60,
				draw_height: 60,
				use_absolute_screen_coordinates: true,
			}, [
				set(_image, child),
			]),
		]
		",

		_image: { type: "null|obj image_widget" },
	},

	on_mouse_enter: "set(has_mouseover, true); render()",
	on_mouse_leave: "set(has_mouseover, false); render()",

	on_click: "[swallow_mouse_event(), [ set(c.selected, c = me) | c <- level.chars, c is obj attack_display]]",

	on_being_removed: "remove_object(_image)",

	on_create: "render(); _spawn_image()",

	on_type_updated: "fire_event('create')",
}

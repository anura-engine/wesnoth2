{
	id: "orb",
	is_strict: true,

	properties: {
		unit_avatar: { type: "obj unit_avatar" },

		red_map: { type: "[decimal,decimal,decimal]", default: [1.0,0.0,0.0], set: "[set(_data, value), set(shader.uniform_commands.u_red_map, value)] asserting shader" },
		green_map: { type: "[decimal,decimal,decimal]", default: [0.0,1.0,0.0], set: "[set(_data, value), set(shader.uniform_commands.u_green_map, value)] asserting shader" },
		blue_map: { type: "[decimal,decimal,decimal]", default: [0.0,0.0,1.0], set: "[set(_data, value), set(shader.uniform_commands.u_blue_map, value)] asserting shader" },

		is_enemy: { type: "bool", default: false, set: "if(_data != value, [set(_data, value); _calculate_colors()])" },
		is_active: { type: "bool", default: false, set: "if(_data != value, [set(_data, value); _calculate_colors()])" },

		_calculate_colors: "def() ->commands [
			if(is_enemy, [
				set(red_map, [1.0*ratio,0.0,0.0]),
				set(green_map, [0.0,1.0*ratio,0.0]),
				set(blue_map, [0.0,0.0,0.5*ratio]),
			], [
				set(red_map, [0.0,0.0,0.5*ratio]),
				set(green_map, [0.0,1.0*ratio,0.0]),
				set(blue_map, [1.0*ratio,0.0,0.0]),
			]) where ratio = 1.0
		]",
	},

	on_create: "_calculate_colors()",

	animation: [{
		id: "normal",
		image: "gui/orb.png",
		rect: [0,0,19,19],
		scale: 0.5,
	}],

	shader: {
		name: "orb_shader",
		vertex: "
        uniform mat4 u_anura_mvp_matrix;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
        varying vec2 v_texcoord;

		void main()
		{
            v_texcoord = a_anura_texcoord;

           	gl_Position = u_anura_mvp_matrix * a_anura_vertex;
		}
		",

		fragment: "
		#version 120
		uniform sampler2D u_anura_tex_map;
		uniform vec3 u_red_map;
		uniform vec3 u_green_map;
		uniform vec3 u_blue_map;
		uniform float u_cycle;
		uniform bool u_active;
		varying vec2 v_texcoord;
		void main()
		{
			if(u_active) {
				vec4 res = vec4(0.0,0.0,0.0,0.0);
				for(float xpos = -2.0; xpos <= 2.0; ++xpos) {
					for(float ypos = -2.0; ypos <= 2.0; ++ypos) {
						vec4 col = texture2D(u_anura_tex_map, v_texcoord + vec2(xpos*0.05, ypos*0.05));
						res += col*(1.2 + sin(u_cycle*0.1)*0.2);
					}
				}

				gl_FragColor[0] = u_red_map[0]*res[0] + u_red_map[1]*res[1] + u_red_map[2]*res[2];
				gl_FragColor[1] = u_green_map[0]*res[0] + u_green_map[1]*res[1] + u_green_map[2]*res[2];
				gl_FragColor[2] = u_blue_map[0]*res[0] + u_blue_map[1]*res[1] + u_blue_map[2]*res[2];
				gl_FragColor[3] = res[3];

				gl_FragColor = gl_FragColor/25.0;
			} else {
				vec4 col = texture2D(u_anura_tex_map, v_texcoord);
	
				gl_FragColor[0] = u_red_map[0]*col[0] + u_red_map[1]*col[1] + u_red_map[2]*col[2];
				gl_FragColor[1] = u_green_map[0]*col[0] + u_green_map[1]*col[1] + u_green_map[2]*col[2];
				gl_FragColor[2] = u_blue_map[0]*col[0] + u_blue_map[1]*col[1] + u_blue_map[2]*col[2];
				gl_FragColor[3] = col[3]*0.5;
			}
		}
		",


		create: "[
			set(uniform_commands.u_red_map,   [1.0,0.0,0.0]),
			set(uniform_commands.u_green_map, [0.0,1.0,0.0]),
			set(uniform_commands.u_blue_map,  [0.0,0.0,1.0]),
		]",

		draw: "[
			set(uniform_commands.u_cycle, parent.cycle),
			set(uniform_commands.u_active, parent.is_active),
		]",

	},
}

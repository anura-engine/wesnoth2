{
	"animation": [
		{
			"duration": 6,
			"frames": 4,
			"id": "stand",
			"image": "flag.png",
			"rect": [3,3,74,74],
			pad: 3,
			"scale": 1
		}
	],

	properties: {
		owner: { type: "int", set: "if(_data != value, [set(_data, value); calculate_color_mapping()])" },
		calculate_color_mapping: "def() ->commands
			set(shader.uniform_commands.u_colors,
				if(owner = 0, [1.0,0.0,0.0],
				   owner = 1, [0.0,0.0,1.0],
				   owner = 2, [0.0,1.0,1.0],
				   owner = 3, [1.0,1.0,0.0],
				   owner = 4, [1.0,1.0,0.0],
				   [1.0,0.0,0.0]
				)
			)
			asserting shader
		",
	},

	events: {
		create: "calculate_color_mapping()",
		end_anim: "set(animation, 'stand')",
	},

	"id": "flag",

	shader: {
		name: "flag_shader",
		vertex: "
        uniform mat4 u_anura_mvp_matrix;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
        varying vec2 v_texcoord;

		void main()
		{
            v_texcoord = a_anura_texcoord;
           	gl_Position = u_anura_mvp_matrix * a_anura_vertex;
		}
		",

		fragment: "
		#version 120
		uniform sampler2D u_anura_tex_map;
		uniform vec3 u_colors;
		varying vec2 v_texcoord;
		void main()
		{
			vec4 col = texture2D(u_anura_tex_map, v_texcoord);

			if(col[1] > 0.3 && col[1] > (col[0] + col[2])*4.0) {
				gl_FragColor[0] = u_colors[0]*col[1];
				gl_FragColor[1] = u_colors[1]*col[1];
				gl_FragColor[2] = u_colors[2]*col[1];
				gl_FragColor[3] = col[3];
			} else {
				gl_FragColor = col;
			}

			gl_FragColor[3] = col[3]*0.75;
		}
		",

		create: "parent.calculate_color_mapping()",
	},
}

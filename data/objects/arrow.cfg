{
	id: "arrow",
	is_strict: true,
	always_active: true,

	properties: {
		points: { type: "[[int,int]]" },

		fade_out: { type: "decimal", default: 0.0, set: "if(_data != value, [set(_data, value), set(shader.uniform_commands.u_fade_out, value) asserting shader])" },
		arrow_alpha: { type: "decimal", default: 1.0, set: "if(_data != value, [set(_data, value), set(shader.uniform_commands.u_arrow_alpha, value) asserting shader])" },

		arrow_texture: { type: "null|string" },
	},

	on_type_updated: "fire_event('create')",

	on_create: "[
		set(uv_array, uv_points),
		set(xy_array, xy_points),
		set(shader.uniform_commands.u_num_segments, num_segments) asserting shader,
		/* // some useful debug code to mark the control points
		map(pos, spawn('debug_mark', {
			mid_x: int(value[0]),
			mid_y: int(value[1]),
			_text: str(index),
		})),
		debug(['POSITION: ', pos]),
		*/
	]
	 where xy_points = [decimal]<- flatten(
	  map(pos, [value[0]+deltas[index][1]*arrow_width, value[1]-deltas[index][0]*arrow_width,
	            value[0]-deltas[index][1]*arrow_width, value[1]+deltas[index][0]*arrow_width])
	  )

	 where uv_points = [decimal]<- flatten(
	  map(pos, [r, 0.0, r, 1.0]
			where r = sum(segment_lengths[:index+1])/total_length)
	 )

      where num_segments = decimal(total_length)/decimal(segment_length)
	  where segment_length = 24
	  where total_length = sum(segment_lengths)
	  where deltas = map(deltas_raw,
	    [value[0]/decimal(size), value[1]/decimal(size)]
	  	where size = segment_lengths[index]
	  )
	  where segment_lengths = map([deltas_raw[0]] + deltas_raw,
	  	sqrt(value[0]*value[0] + value[1]*value[1]))
	  where deltas_raw =
	  map(pos,
	    [cur[0] - prev[0], cur[1] - prev[1]]
	    where cur = value
		where prev = if(index = 0, value, pos[index-1]))

	  where pos =
	  fold(
	  map(point_sets,
	    map(range(num_segments-1),
			[xpos,ypos]
			where xpos = inv_t*inv_t*p0[0] + 2*inv_t*t*p1[0] + t*t*p2[0]
			where ypos = inv_t*inv_t*p0[1] + 2*inv_t*t*p1[1] + t*t*p2[1]
			where inv_t = 1.0 - t
			where t = value/decimal(num_segments)
		)
	  	where p0 = value[0]
	  	where p1 = value[1]
	  	where p2 = value[2]
		where first_point_set = (index = 0)
	  ),

	  a[:size(a)-overlap_len] +
	    map(range(overlap_len),
		[p2[0]*ratio + p1[0]*(1.0-ratio), p2[1]*ratio + p1[1]*(1.0-ratio)]
		where p1 = a[size(a)-overlap_len+index]
		where p2 = b[index]
		where ratio = index/decimal(overlap_len)) +
	  b[overlap_len:]
	  
	  where overlap_len = min(size(a), size(b))/2
	  )

	  where point_sets =
	  if(size(points) = 2,
	    [[points[0], [(points[0][0] + points[1][0])/2, (points[0][1] + points[1][1])/2], points[1]]],
	    map(range(size(points)-2), [points[index], points[index+1], points[index+2]])
	  )
	  where num_segments = 32
	  where arrow_width = 10
	  ",


	shader: {
		name: "arrow_render",
		vertex: "
		uniform mat4 u_anura_mvp_matrix;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
		uniform int resolve_cycle;
		uniform int fizzle_cycle;
        varying vec2 v_texcoord;
		void main()
		{
            v_texcoord = a_anura_texcoord;
            gl_Position = u_anura_mvp_matrix * a_anura_vertex;
		}
		",

		fragment: "
        uniform sampler2D u_anura_tex_map;
        uniform sampler2D u_effect_tex;
		uniform bool u_has_texture;
		uniform float u_num_segments;
		uniform float u_anura_cycle;
		uniform float u_fade_out;
		uniform float u_arrow_alpha;
		varying vec2 v_texcoord;

        void main()
        {

			float alpha = u_arrow_alpha;
			float alpha_fade = 5.0/u_num_segments;
			float left = v_texcoord[0] - u_fade_out;
			if(left < alpha_fade) {
				alpha = alpha * max(0, left / alpha_fade);
			}
			
			if(v_texcoord[0] > 1.0 - alpha_fade) {
				float r = 1.0 - v_texcoord[0];
				alpha = alpha * (r/alpha_fade);
			}

			float segment_pos = v_texcoord[0]*u_num_segments + abs(0.5 - v_texcoord[1]) - u_anura_cycle*0.02;
			if(segment_pos - floor(segment_pos) > 0.5) {
				gl_FragColor = vec4(0,0,0,0);
			} else {
				vec4 col = vec4(1,0,0,1);
				if(u_has_texture) {
					vec2 pos = v_texcoord;
					pos[0] -= u_anura_cycle*0.005;
					col = texture2D(u_effect_tex, pos);
	
					pos[0] -= u_anura_cycle*0.002;
					col = mix(col, texture2D(u_effect_tex, pos), 0.5);
				}

				gl_FragColor = col;
				gl_FragColor[3] = alpha;
			}
		}",

		create: "[
			set(uniform_commands.u_fade_out, 0.0),
			set(uniform_commands.u_arrow_alpha, 1.0),
			set(uniform_commands.u_effect_tex, 1),
			set(uniform_commands.u_has_texture, false),
			if(parent.arrow_texture, [
				set(textures, [tex,tex]),
				set(tex.binding_point, 1),
				set(uniform_commands.u_has_texture, true),
			] where tex = load_texture(parent.arrow_texture))
		]",

		draw: "[
			if(parent.arrow_texture,
				set(textures[1].binding_point, 1)
			)
		]",
	},

	animation: {
		id: "normal",
		image: "effects/1x1.png",
		x: 0,
		y: 0,
		w: 1,
		h: 1,
		frames: 1,
		scale: 1,
	},

}

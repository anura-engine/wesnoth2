{
	id: "text_entry",
	is_strict: true,

	properties: {

		_password: { type: "bool", default: false },

		font_size: { type: "int", init: "lib.wesnoth.py(14)" },

		default_text: { type: "string", default: "Enter text here" },
		_default_text_color: { type: "[decimal,decimal,decimal,decimal]", default: [0.5,0.5,0.5,1.0] },
		text: { type: "string", default: "", set: "if(value != _data, [set(_data, value), if(cursor_pos > size(text), set(cursor_pos, size(text))), set(_select_pos, null), _set_dirty(), if(_on_change, ; _on_change())])" },

		display_text: "string :: if(_password, fold(map(text, '*'), a+b, ''), text)",

		_text_color: { type: "[decimal,decimal,decimal,decimal]", default: [1.0,1.0,1.0,1.0] },

		_highlight_color: { type: "[decimal,decimal,decimal,decimal]", default: [0,0,0.5,1.0] },

		_focus_set_time: { type: "int", default: 0 },
		has_focus: { default: false, set: "if(value != _data, [_refresh_cursor(), set(_focus_set_time, level.cycle), set(_data, value), if(value, [set(c.has_focus, false) | c <- level.chars, c is obj text_entry, c != me])])" },

		_on_enter: { type: "null|function()->commands" },
		_on_enter_arg: { type: "null|function(obj text_entry)->commands" },
		_on_tab: { type: "null|function()->commands" },
		_on_change: { type: "null|function()->commands" },

		tab_to_next: "def() ->commands
		[
		if(n != -1,
			if(obj != null, set(obj.has_focus, true))
			where obj = find(c, value is obj text_entry)
			where c = level.chars[n+1:] + level.chars[:n+1]
		)
		]
			where n = index(level.chars, me)
		",

		_width: { type: "int" },
		_height: { type: "int", init: "lib.wesnoth.py(26)" },

		_scroll_pos: { type: "int", default: 0, set: "if(_data != value, [set(_data, value), _set_dirty()])" },

		cursor_pos: { type: "int", default: 0, set: "if(_data != value,
			[
				set(_data, value),
				if(_select_pos != null, _set_dirty()),
				if(offset > _scroll_pos + _width - _border_left*2,
					set(_scroll_pos, offset - _width + _border_left*2),
				   offset < _scroll_pos + _border_left,
				    set(_scroll_pos, offset)
				),
			] where offset = _get_cursor_offset(value))"
		},
		_select_pos: { type: "null|int", set: "if(_data != value, [set(_data, value), _set_dirty()])" },

		_border_top : { type: "int", init: "lib.wesnoth.py(4)" },
		_border_left : { type: "int", init: "lib.wesnoth.py(4)" },

		_calculate_fragments: "def(cairo_callable c, string str, null|[int,int] selection=null) ->[cairo_text_fragment]
			c.markup_text(q(<font weight='55' size=') + font_size + q('>) +
			if(selection = null, c.escape_text(str),
			 c.escape_text(str[:left]) +
			 q(<font tag='selection'>) +
			 c.escape_text(str[left:right]) +
			 q(</font>) +
			 c.escape_text(str[right:])
			     where left = min(selection[0],selection[1])
			     where right = max(selection[0],selection[1])
			) +
			q(</font>), { width: 10000})
		",

		_get_mouse_pos_to_cursor: "def(int raw_pos) ->int
		if(_get_cursor_offset(size(text)) < pos, size(text),
			_get_mouse_pos_to_cursor_internal(pos, 0, size(text))
		)
		where pos = raw_pos + _scroll_pos
		",

		_get_mouse_pos_to_cursor_internal: "def(int pos, int min_pos, int max_pos) ->int
			if(mid = min_pos or mid = max_pos, mid,
			if(offset > pos,
			   _get_mouse_pos_to_cursor_internal(pos, min_pos, mid),
			   _get_mouse_pos_to_cursor_internal(pos, mid, max_pos))
			)
			where offset = _get_cursor_offset(mid)
			where mid = (min_pos + max_pos)/2
		",

		_get_cursor_offset: "def(int pos) ->int
		int(sum(map(fragments, value.x_advance)))
			where fragments = _calculate_fragments(c, display_text[:pos])
			where c = canvas()
		",

		render: "def() ->commands [
			set(_dirty, false),
			set(animation, lib.wesnoth.render_frame(c, _width, _height,
			[
				c.rectangle(0, 0, _width, _height),
				c.set_source_rgba(0, 0, 0, 1),
				c.fill(),

				c.translate(_border_left - _scroll_pos, _border_top),
				map(fragments, [
					if(value.tag is list and 'selection' in value.tag, [
						c.set_source_color(_highlight_color),
						c.rectangle(value.x, value.y, value.x_advance, value.height),
						c.fill(),
					]),

					c.set_source_color(if(text, _text_color, _default_text_color)),

					c.save(),
					value.path,
					c.fill(),
					c.restore(),
				]),

			])
			) where fragments = _calculate_fragments(c,
			string ::
				if(text, display_text, default_text),
				if(_select_pos != null, [cursor_pos, _select_pos])
			  )
			  where c = canvas()
		]",

		_left_repeat: { type: "int", default: 0 },
		_right_repeat: { type: "int", default: 0 },

		_move_right: "def() ->commands _set_cursor_pos(cursor_pos+1)",
		_move_left: "def() ->commands _set_cursor_pos(cursor_pos-1)",

		_set_cursor_pos: "def(int new_pos) ->commands
		[
		_refresh_cursor(),
		if((_dragging or _key_shift) and _select_pos = null, set(_select_pos, cursor_pos)),
		if(_dragging = false and _key_shift = false, set(_select_pos, null)),
		set(cursor_pos, clamp(new_pos, 0, size(text))),
		]
		",

		_show_cursor: "def(bool shown) ->commands
		if(shown,
			set(draw_primitives, [{
				type: 'line',
				color1: [255,255,255,255],
				color2: [255,255,255,255],
				p1: [x - _scroll_pos + _border_left + pos+1,y + _border_top],
				p2: [x - _scroll_pos + _border_left + pos+1,y + _height - _border_top],
				width: 4,
			} where pos = _get_cursor_offset(cursor_pos)]),
	
			set(draw_primitives, [])
		)
		",

		_cursor_shown_basis: { type: "int", default: 0 },

		_refresh_cursor: "def()->commands set(_cursor_shown_basis, cycle)",

		_backspace_repeat: { type: "int", default: 0 },
		_delete_repeat: { type: "int", default: 0 },

		_last_keys: { type: "null|list" },

		_key_pressed: "def(string|int key) ->bool (_last_keys != null and key in level.player.ctrl_keys and key not in _last_keys)",

		_enter_pressed: "bool :: _key_pressed(13)",
		_tab_pressed: "bool :: _key_pressed(9)",

		_key_control: "bool :: ((level.player.ctrl_mod_key/64)%4 > 0)",
		_key_shift: "bool :: (level.player.ctrl_mod_key%4 > 0)",

		_key_backspace: "bool :: 8 in level.player.ctrl_keys",
		_key_delete: "bool :: 127 in level.player.ctrl_keys",

		_key_home: "bool :: 1073741898 in level.player.ctrl_keys",
		_key_end: "bool :: 1073741901 in level.player.ctrl_keys",

		_backspace: "def() ->commands
		[
		debug(['backspace', _select_pos, cursor_pos, text]),
		if(_select_pos != null and _select_pos != cursor_pos,
		   _delete(),
			if(cursor_pos > 0, [
				set(text, text[:cursor_pos-1] + text[cursor_pos:]),
				add(cursor_pos, -1),
				_refresh_cursor(),
			]; render()
			)
		)
		]
		",

		_delete_selection: "def() ->commands
		if(_select_pos != null and _select_pos != cursor_pos, _delete())
		",

		_delete: "def() ->commands
			if(_select_pos != null and _select_pos != cursor_pos,
			[
				set(text, text[:left] + text[right:]),
				set(_select_pos, null),
				set(cursor_pos, left),
			]
				where left = min(_select_pos,cursor_pos)
				where right = max(_select_pos,cursor_pos)
			; render(),
					
			cursor_pos < size(text), [
				set(text, text[:cursor_pos] + text[cursor_pos+1:]),
				_refresh_cursor(),
			]; render()
			)
		",

		_set_dirty: "def() ->commands
			set(_dirty, true)
		",

		_dirty: { default: false },

		_dragging: { default: false },

		_recent_clicks: { type: "[int]", default: [] },

		_clipboard_copy: "def() ->commands
			if(_select_pos != null, set_clipboard_text(text[min(cursor_pos,_select_pos):max(cursor_pos,_select_pos)]))
		",

		_clipboard_cut: "def() ->commands
		[
			_clipboard_copy(),
			_delete_selection(),
		]
		",

		_clipboard_paste: "def() ->commands
		_delete_selection();
		_text_input(get_clipboard_text())
		",

		_text_input: "def(string new_text) ->commands
		if(_select_pos != null and _select_pos != cursor_pos, _delete(), set(_select_pos, null));
		[
			set(text, text[:cursor_pos] + new_text + text[cursor_pos:]),
			add(cursor_pos, size(new_text)),
	
			_refresh_cursor(),
		]; render()
		",
	},

	on_type_updated: "fire_event('create')",

	on_create: "render()",

	on_process: "
	[
		if(_dirty, render()),

		_show_cursor(has_focus and (cycle - _cursor_shown_basis)%60 < 30),

		if(has_focus, [

		if(_enter_pressed and _on_enter, _on_enter()),
		if(_enter_pressed and _on_enter_arg, _on_enter_arg(me)),
		if(_tab_pressed and level.cycle > _focus_set_time+3, if(_on_tab, _on_tab(), tab_to_next())),

		if(_key_control and _key_pressed('x'), _clipboard_cut()),
		if(_key_control and _key_pressed('c'), _clipboard_copy()),
		if(_key_control and _key_pressed('v'), _clipboard_paste()),

		if(_key_home, _set_cursor_pos(0)),
		if(_key_end, _set_cursor_pos(size(text))),

		if(_key_backspace,
		   add(_backspace_repeat, 1); if(_backspace_repeat = 1 or _backspace_repeat > 20 and _backspace_repeat%3 = 0, _backspace()),
		   set(_backspace_repeat, 0)
		),

		if(_key_delete,
		   add(_delete_repeat, 1); if(_delete_repeat = 1 or _delete_repeat > 20 and _delete_repeat%3 = 0, _delete()),
		   set(_delete_repeat, 0)
		),

		if(level.player.ctrl_left,
		   add(_left_repeat, 1); if(_left_repeat = 1 or _left_repeat > 20 and _left_repeat%3 = 0, _move_left()),
		   set(_left_repeat, 0)
		),

		if(level.player.ctrl_right,
		   add(_right_repeat, 1); if(_right_repeat = 1 or _right_repeat > 20 and _right_repeat%3 = 0, _move_right()),
		   set(_right_repeat, 0)
		),

		]),

		set(_last_keys, level.player.ctrl_keys),
	]
	",

	on_text_input: "if(has_focus,
	_text_input(arg.text)

	)",

	on_click: "
		add(_recent_clicks, [cycle]); if(size(_recent_clicks) > 3, set(_recent_clicks, _recent_clicks[size(_recent_clicks)-3:]));
	
	[
		if(size(_recent_clicks) >= 3 and _recent_clicks[size(_recent_clicks)-3] > cycle-50,
		  //triple click
		  [
		  set(_select_pos, 0),
		  set(cursor_pos, size(text)),
		  set(_recent_clicks, []),
		  ],

		  size(_recent_clicks) >= 2 and _recent_clicks[size(_recent_clicks)-2] > cycle-30,
		  //double click

		  [
		  set(_select_pos, if(space_before = -1, 0, cursor_pos - space_before)),
		  set(cursor_pos, if(space_after = -1, size(text), cursor_pos + space_after)),
		  ]

		  where space_before = index(before, ' ')
		  where space_after = index(after, ' ')
		  where before = reverse(chars[:cursor_pos])
		  where after = chars[cursor_pos:]
		  where chars = split(text, '')
		 ),

	]",

	on_mouse_down: "[
		set(has_focus, true),
		_set_cursor_pos(_get_mouse_pos_to_cursor(arg.mouse_x - x - _border_left))
	]",

	on_drag_start: "[
		set(_dragging, true);
		_set_cursor_pos(_get_mouse_pos_to_cursor(arg.mouse_x - x - _border_left))
	]",

	on_drag: "[
		_set_cursor_pos(_get_mouse_pos_to_cursor(arg.mouse_x - x - _border_left))
	]",

	on_drag_end: "[
		set(_dragging, false),
	]",
}

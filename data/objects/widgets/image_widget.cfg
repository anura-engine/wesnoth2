{
	id: "image_widget",
	is_strict: true,
	always_active: true,

	properties: {
		image: { type: "string" },
		_base_image_area: { type: "[decimal,decimal,decimal,decimal]", default: [0,0,0,0] },
		image_area: { type: "[decimal,decimal,decimal,decimal]" },

		//set this image_area to trigger redraws when it's set.
		image_area_animated: { variable: false, type: "[decimal,decimal,decimal,decimal]", get: "image_area", set: "[set(image_area, value), set_dirty()]" },

		wave: { type: "{intensity: decimal, period: decimal, offset: decimal}|null",
		        get: "_data",
				set: "[
					set(_data, value),
					if(value = null, [
						set(shader.uniform_commands.u_wave_intensity, 0.0),
					], [
						set(shader.uniform_commands.u_wave_intensity, value.intensity),
						set(shader.uniform_commands.u_wave_period, value.period),
						set(shader.uniform_commands.u_wave_offset, value.offset),
					])
				] asserting shader != null",
		},

		draw_width: { type: "int" },
		draw_height: { type: "int" },

		_calculate_image_area: "def() ->[decimal,decimal,decimal,decimal]
		  if(src_ratio = dst_ratio,
				image_area,
		     src_ratio < dst_ratio,
			   //e.g. converting 4:3 to 16:10. Cut some off the top
			   //and bottom.
			   [image_area[0], image_area[1] + height_diff/2, image_area[2], image_area[3] - height_diff/2]
			 where height_diff = src_height - desired_src_height
			 where desired_src_height = src_width / dst_ratio,

			  //e.g. converting 16:10 to 4:3. Cut off some of the sides.
              [image_area[0] + width_diff/2, image_area[1], image_area[2] - width_diff/2, image_area[3]]
			 where width_diff = src_width - desired_src_width
			 where desired_src_width = src_height * dst_ratio

		  )
			where dst_ratio = decimal(draw_width)/decimal(draw_height),
			where src_ratio = decimal(src_width)/decimal(src_height)
			where src_width = image_area[2] - image_area[0]
			where src_height = image_area[3] - image_area[1]
		",

		set_dirty: "def() ->commands set(_dirty, true)",
		_dirty: { type: "bool", default: true },
	},

	on_create: "
	[
		set(animation, {
			id: 'image',
			force_no_alpha: true,
			image: image,
			x: xpos,
			y: ypos,
			w: x2pos - xpos - 1,
			h: y2pos - ypos - 1,
			scale: decimal(draw_width) / decimal(x2pos - xpos),
			frames: 1,
		}),

		set(_base_image_area, [xpos, ypos, x2pos, y2pos]),
		set(shader.uniform_commands.u_sprite_dim, [x2pos - xpos, y2pos - ypos]),
	] asserting shader != null
	where xpos = int(img_area[0])
	where ypos = int(img_area[1])
	where x2pos = int(img_area[2])
	where y2pos = int(img_area[3])
	where img_area = _calculate_image_area()
	",

	on_draw: "
		if(_dirty, [
			set(shader.uniform_commands.u_sprite_adjust,
			  [
			   img_area[0]-_base_image_area[0],
			   img_area[1]-_base_image_area[1],
			   img_area[2]-_base_image_area[2],
			   img_area[3]-_base_image_area[3],
			  ]),

		] asserting shader != null
		)
		where img_area = _calculate_image_area()
	",

	shader: {
	name: "card_image_render",
	vertex: "
	uniform mat4 u_anura_mvp_matrix;
	uniform vec4 u_anura_sprite_area;
	uniform vec4 u_anura_draw_area;
	uniform vec4 u_sprite_adjust;
	uniform vec2 u_sprite_dim;
	attribute vec4 a_anura_vertex;
	attribute vec2 a_anura_texcoord;
	varying vec2 v_texcoord;
	void main()
	{
		float px_width = (u_anura_sprite_area[2] - u_anura_sprite_area[0]) / u_sprite_dim[0];
		float px_height = (u_anura_sprite_area[3] - u_anura_sprite_area[1]) / u_sprite_dim[1];

		v_texcoord = a_anura_texcoord;

		if(v_texcoord[0] < (u_anura_sprite_area[0] + u_anura_sprite_area[2])*0.5) {
			v_texcoord[0] += px_width*u_sprite_adjust[0];
		} else {
			v_texcoord[0] += px_width*u_sprite_adjust[2];
		}

		if(v_texcoord[1] < (u_anura_sprite_area[1] + u_anura_sprite_area[3])*0.5) {
			v_texcoord[1] += px_height*u_sprite_adjust[1];
		} else {
			v_texcoord[1] += px_height*u_sprite_adjust[3];
		}

		gl_Position = u_anura_mvp_matrix * a_anura_vertex;
	}
	",

	fragment: "
	uniform sampler2D u_anura_tex_map;
	uniform vec4 u_anura_sprite_area;
	uniform vec2 u_sprite_dim;
	uniform float u_wave_intensity;
	uniform float u_wave_period;
	uniform float u_wave_offset;
	uniform float u_alpha;
	varying vec2 v_texcoord;
	void main()
	{
		vec2 texcoord = v_texcoord;
		if(u_wave_intensity > 0.0) {
			float xpos = (v_texcoord[0] - u_anura_sprite_area[0]) / (u_anura_sprite_area[2] - u_anura_sprite_area[0]);
			float ypos = (v_texcoord[1] - u_anura_sprite_area[1]) / (u_anura_sprite_area[3] - u_anura_sprite_area[1]);

			float distort = sin(xpos*u_wave_period + u_wave_offset)*min(u_wave_intensity, 1.0 - 2.0*abs(xpos - 0.5)) /
			                (u_anura_sprite_area[2] - u_anura_sprite_area[0]);
			texcoord[0] += distort;
		}

		float px_width = (u_anura_sprite_area[2] - u_anura_sprite_area[0]) / u_sprite_dim[0];
		float px_height = (u_anura_sprite_area[3] - u_anura_sprite_area[1]) / u_sprite_dim[1];

		gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);

		for(float x = -3.0; x <= 3.0; x += 1.0) {
			for(float y = -3.0; y <= 3.0; y += 1.0) {
				float px = (px_width*x)/7.0;
				float py = (px_height*y)/7.0;

				gl_FragColor += texture2D(u_anura_tex_map, texcoord + vec2(px,py));
			}
		}

		gl_FragColor /= 49.0;
		gl_FragColor[3] *= u_alpha;
	}
	",

	draw: "[
		set(uniform_commands.u_alpha, parent.alpha/255.0)
	]
	",

	}
}

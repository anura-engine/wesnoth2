{
	id: "unit_pane",
	is_strict: true,
	use_absolute_screen_coordinates: true,

	properties: {
		unit: { type: "class unit" },
		controller: { type: "obj game_controller" },

		show_meditate: { type: "bool", default: false },

		_width: { type: "int", default: 180 },
		_height: "int :: 90 + if(unit.attacks, 20 + 70*size(unit.attacks), 0) + if(unit.summons, 20 + 70*size(unit.summons), 0) + if(unit.memory > 0 and show_meditate, 90, 0)",

		update: "def() ->commands
			render();
			_create_avatar()
		",

		has_border: { type: "bool", default: false },

		render: "def() ->commands
		set(animation, lib.util.render_frame(c, ww, hh,
		[
			c.rectangle(0,0,ww,hh),
			c.set_source_rgba(0.2,0.2,0.2,1.0),
			c.fill(),

			if(has_border, [
				c.rectangle(0,0,ww,hh),
				c.set_line_width(2),
				c.set_source_rgba(0.4,0.4,0.4,1.0),
				c.stroke(),
			]),

			c.set_source_rgba(1,1,1,1),

			map(fragments, [
				c.save(),
				c.translate(90, 12),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(
			q(<b>) + unit.name + q(</b>\n) +
			str(unit.current_hitpoints) + '/' + str(unit.hitpoints) + ' HP\n' +
			if(unit.mana or unit.mana_gain,
			   str(unit.mana) +
			   if(unit.mana_gain != null,
				  q(<font size='-20%'>) + '(+' + str(unit.mana_gain) + ')</font>',
			    '')
			 + ' Mana\n', '') +
			str(unit.move) + if(unit.move = 1, ' Move', ' Moves'), { width: 200, scale: 1.0 })
		]
		))
		where ww = _width
		where hh = _height
		where c = canvas()
		",

		_create_avatar: "def() ->commands
		let old_attacks = _attacks;
		let old_summons = _summons;
		[
			remove_object(_avatar),
			spawn('unit_avatar_' + unit.id, {
				zorder: zorder+1,
				on_board: false,
				x: x - 10,
				y: y,
				unit: unit,
				controller: controller,
				use_absolute_screen_coordinates: true,
			}, [
				set(_avatar, obj unit_avatar<- child),
			]),

			set(_attacks, []),
			set(_summons, []),

			map(unit.attacks,

				[
					set(a.mid_x, mid_x),
					set(a.y, y + 100 + index*70),
					set(a.zorder, zorder+10),
					if(a not in level.chars, add_object(a)),
					add(_attacks, [a]),
				]

				where a = find(old_attacks, value.attack = context.value) or
				object('attack_display', {
					controller: controller,
					parent_unit: unit,
					mid_x: mid_x,
					y: y + 100 + index*70,
					zorder: zorder+10,
					attack: value,
				}
				)
			),

			map(unit.summons,
				[
					if(existing, s.update()),
					if(not hint, [
						set(s.mid_x, mid_x_dest),
						set(s.y, y_dest),
					]),
					set(s.zorder, zorder+10),
					if(s not in level.chars, add_object(s)),
					add(_summons, [s]),

					if(hint,
						;
						[
							animate(s, {
								mid_x: mid_x_dest,
							}, {
								duration: 30,
								easing: lib.math.ease_in_sine,
							}),

							animate(s, {
								y: y_dest
							}, {
								duration: 30,
							}),

						];

						s.move_avatar()
					)
				]

				where s = existing or
				object('summon_display', {
					controller: controller,
					parent_unit: unit,
					mid_x: if(hint, hint.mid_x, mid_x_dest),
					y: if(hint, hint.y, y_dest),
					zorder: zorder+10,
					summon: value,
				})
				where existing = find(old_summons, value.summon = context.value)
				where hint = if(new_action_hint is obj summon_display and new_action_hint.summon = value, new_action_hint)
				where mid_x_dest = mid_x
				where y_dest = y + 100 + size(unit.attacks)*70 + 20 + index*70
			);

			if(unit.memory > 0 and show_meditate,
				if(_meditate = null,
					spawn('meditate_display', {
						controller: controller,
						parent_unit: unit,
						mid_x: mid_x,
						y: y_dest,
						zorder: zorder+10,
					}, [
						set(_meditate, child)
					]),

					set(_meditate.y, y_dest)
				) where y_dest = y + 100 + size(unit.attacks)*70 + 20 + size(unit.summons)*70 + 20,

				[
					remove_object(_meditate),
					set(_meditate, null),
				]
			);

			[remove_object(a) | a <- old_attacks, a not in _attacks];
			[remove_object(s) | s <- old_summons, s not in _summons];
			set(new_action_hint, null)
		]
		",

		_avatar: { type: "null|obj unit_avatar" },

		_attacks: { type: "[obj attack_display]", default: [] },
		_summons: { type: "[obj summon_display]", default: [] },
		_meditate: { type: "null|obj meditate_display" },

		new_action_hint: { type: "null|obj action_display" },
	},

	events: {

		being_removed: "[
			remove_object(_avatar),
			map(_attacks, remove_object(value)),
			map(_summons, remove_object(value)),
			remove_object(_meditate),
		]",

		create: "
		render();
		if(y + _height > SCREEN_HEIGHT-10,
		   set(y, SCREEN_HEIGHT - _height - 10),
		   y < 10,
		   set(y, 10)
		);
	
		_create_avatar()",

		type_updated: "fire_event('create')",
	},
}

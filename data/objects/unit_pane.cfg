{
	id: "unit_pane",
	is_strict: true,
	use_absolute_screen_coordinates: true,

	properties: {
		unit: { type: "class unit" },
		controller: { type: "obj game_controller" },

		_width: { type: "int", default: 180 },
		_height: "int :: 90 + if(unit.attacks, 20 + 70*size(unit.attacks), 0) + if(unit.summons, 20 + 70*size(unit.summons), 0)",

		update: "def() ->commands
			render();
			map(_attacks, value.update())
		",

		has_border: { type: "bool", default: false },

		render: "def() ->commands
		set(animation, lib.util.render_frame(c, ww, hh,
		[
			c.rectangle(0,0,ww,hh),
			c.set_source_rgba(0.2,0.2,0.2,1.0),
			c.fill(),

			if(has_border, [
				c.rectangle(0,0,ww,hh),
				c.set_line_width(2),
				c.set_source_rgba(0.4,0.4,0.4,1.0),
				c.stroke(),
			]),

			c.set_source_rgba(1,1,1,1),

			map(fragments, [
				c.save(),
				c.translate(90, 12),
				value.path,
				c.fill(),
				c.restore(),
			])

			where fragments = c.markup_text(
			q(<b>) + unit.name + q(</b>\n) +
			str(unit.current_hitpoints) + '/' + str(unit.hitpoints) + ' HP\n' +
			if(unit.mana or unit.mana_gain,
			   str(unit.mana) +
			   if(unit.mana_gain != null,
				  q(<font size='-20%'>) + '(+' + str(unit.mana_gain) + ')</font>',
			    '')
			 + ' Mana\n', '') +
			str(unit.move) + if(unit.move = 1, ' Move', ' Moves'), { width: 200, scale: 1.0 })
		]
		))
		where ww = _width
		where hh = _height
		where c = canvas()
		",

		_create_avatar: "def() ->commands [
			remove_object(_avatar),
			spawn('unit_avatar_' + unit.id, {
				zorder: zorder+1,
				on_board: false,
				x: x - 10,
				y: y,
				unit: unit,
				controller: controller,
				use_absolute_screen_coordinates: true,
			}, [
				set(_avatar, obj unit_avatar<- child),
			]),

			map(unit.attacks,
				spawn('attack_display', {
					controller: controller,
					parent_unit: unit,
					mid_x: mid_x,
					y: y + 100 + index*70,
					zorder: zorder+10,
					attack: value,
				}, [
					add(_attacks, [child]),
				])
			),

			map(unit.summons,
				spawn('summon_display', {
					controller: controller,
					parent_unit: unit,
					mid_x: mid_x,
					y: y + 100 + size(unit.attacks)*70 + 20 + index*70,
					zorder: zorder+10,
					summon: value,
				}, [
					add(_summons, [child]),
				])
			),
		]
		",

		_avatar: { type: "null|obj unit_avatar" },

		_attacks: { type: "[obj attack_display]", default: [] },
		_summons: { type: "[obj summon_display]", default: [] },
	},

	on_being_removed: "[
		remove_object(_avatar),
		map(_attacks, remove_object(value)),
		map(_summons, remove_object(value)),
	]",

	on_create: "
	render();
	if(y + _height > SCREEN_HEIGHT-10,
	   set(y, SCREEN_HEIGHT - _height - 10),
	   y < 10,
	   set(y, 10)
	);
	
	_create_avatar()",

	on_type_updated: "fire_event('create')",
}
